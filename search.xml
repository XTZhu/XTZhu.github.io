<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020/11/16 纪事</title>
    <url>/2010/11/16/2020-11-16-%E7%BA%AA%E4%BA%8B/</url>
    <content><![CDATA[<h1 id="早晨"><a href="#早晨" class="headerlink" title="早晨"></a>早晨</h1><p>早8点 闹钟响了，但是没有起床，9点起床</p>
<p>9点半出门 早餐是肠粉，本来要寄东西给毛哥，但是怕迟到 所以打算晚上寄。</p>
<p>10点到公司，业务业务业务。。。</p>
<h1 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h1><p>妈妈发消息说爸爸的腰伤犯了，躺在床上起不来，三节腰椎间盘突出，在家休养，妈妈请假照顾。发来视频电话，但是随后挂断了。12点10分，我去消防通道回拨，接通，爸爸在沙发躺着，妈妈在沙发坐着。没有很紧张的神情，见我来电很高兴，问了一下情况，叮嘱我少吃外卖，表示收到后告诉他们晚点再回拨给他们。没有想象中那么严重，暂时松了一口气。沙县的中午饭，1点，午休。。很吵，同事在打csgo，睡到1点半醒了，睡的很难受。到1点50打起精神。上班，业务业务业务。。。</p>
<h1 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h1><ul>
<li>6点15左右下班，一起回家。</li>
<li>6点34取了快递，健身环大冒险和PONY的橘色高帮，PONY送的短袖是女装，hhh好吧。</li>
<li>收拾一下出门吃晚饭，在楼下肠粉店吃牛丸面，顺便给毛哥寄回马里奥派对。</li>
<li>回家是7点10分，给爸爸妈妈视频。爸爸已经坐起来了，看起来状态还可以，闲聊，闲聊。</li>
<li>8点10分，开始试健身换大冒险，慢跑、深蹲、抬腿、拉扯普拉提环。</li>
<li>8点50分，结束，第一关boss没有打完，有点虚，还是要加强锻炼。</li>
<li>打开炉石，下了一把棋，选的乔治，拿了第五，不升不降。</li>
<li>9点20分，洗澡。</li>
<li>9点45，洗衣服，烧开水喝。</li>
<li>9点56分，开始写这篇。</li>
<li>20点22分，写完。</li>
</ul>
]]></content>
      <tags>
        <tag>纪事</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax跨域（转载）</title>
    <url>/2019/04/18/Ajax%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<blockquote>
<p>转载自<br>    <a href="https://segmentfault.com/a/1190000012469713">https://segmentfault.com/a/1190000012469713</a><br>    <a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html">http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a><br>    <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>
</blockquote>
<h1 id="什么是同源政策？"><a href="#什么是同源政策？" class="headerlink" title="什么是同源政策？"></a>什么是同源政策？</h1><p>说起跨域，就必须先了解“同源政策”。浏览器安全的基石是”同源政策”（same-origin policy）。很多开发者都知道这一点，但了解得不全面。</p>
<h2 id="同源政策的含义"><a href="#同源政策的含义" class="headerlink" title="同源政策的含义"></a>同源政策的含义</h2><p>1995年，<code>同源政策</code>由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。</p>
<p>最初，它的含义是指，A网页设置的 Cookie，B网页不能打开，除非这两个网页”同源”。所谓<strong>同源</strong>指的是”三个相同”。</p>
<ul>
<li>协议相同</li>
<li>域名相同</li>
<li>端口相同</li>
</ul>
<p>举例来说，<code>http://www.example.com/dir/page.html</code>这个网址，协议是<code>http://</code>，域名是<code>www.example.com</code>，端口是<code>80</code>（默认端口可以省略）。它的同源情况如下。</p>
<pre><code>- http://www.example.com/dir2/other.html：同源
- http://example.com/dir/other.html：不同源（域名不同）
- http://v2.www.example.com/dir/other.html：不同源（域名不同）
- http://www.example.com:81/dir/other.html：不同源（端口不同）</code></pre><h2 id="同源政策的目的"><a href="#同源政策的目的" class="headerlink" title="同源政策的目的"></a>同源政策的目的</h2><p>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p>
<p>设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？</p>
<p>很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制。</p>
<p>由此可见，”同源政策”是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。</p>
<h2 id="同源政策的限制范围"><a href="#同源政策的限制范围" class="headerlink" title="同源政策的限制范围"></a>同源政策的限制范围</h2><p>随着互联网的发展，”同源政策”越来越严格。目前，如果非同源，共有三种行为受到限制。</p>
<p>（1） Cookie、LocalStorage 和 IndexDB 无法读取。<br>（2） DOM 无法获得。<br>（3） AJAX 请求不能发送。</p>
<p>在这里我们主要讨论AJAX的跨域问题。</p>
<h1 id="AJAX的跨域"><a href="#AJAX的跨域" class="headerlink" title="AJAX的跨域"></a>AJAX的跨域</h1><p>同源政策规定，AJAX请求只能发给同源的网址，否则就报错。</p>
<p>除了架设服务器代理（浏览器请求同源服务器，再由后者请求外部服务），有三种方法规避这个限制。</p>
<ul>
<li>JSONP</li>
<li>WebSocket</li>
<li>CORS</li>
</ul>
<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>(现在已经几乎不会再使用JSONP了，所以JSONP了解下即可)</p>
<p>jsonp解决跨域问题是一个比较古老的方案(实际中不推荐使用),这里做简单介绍(实际项目中如果要使用JSONP,一般会使用JQ等对JSONP进行了封装的类库来进行ajax请求)</p>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>JSONP之所以能够用来解决跨域方案,主要是因为<code>&lt;script&gt;</code>脚本拥有跨域能力,而JSONP正是利用这一点来实现。具体原理如图</p>
<p><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/20190418-1_articlex.png" alt="JSONP"></p>
<h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><p>JSONP的实现步骤大致如下</p>
<ul>
<li>客户端网页网页通过添加一个<code>&lt;script&gt;</code>元素，向服务器请求JSON数据，这种做法不受同源政策限制</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addScriptTag</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">  script.setAttribute(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;text/javascript&quot;</span>);</span><br><span class="line">  script.src = src;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  addScriptTag(<span class="string">&#x27;http://example.com/ip?callback=foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;response data: &#x27;</span> + <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">&#125;;                      </span><br></pre></td></tr></table></figure>

<p>请求时,接口地址是作为构建出的脚本标签的src的,这样,当脚本标签构建出来时,最终的src是接口返回的内容</p>
<ul>
<li><p>服务端对应的接口在返回参数外面添加函数包裹层</p>
<p>  foo({</p>
<pre><code>&quot;test&quot;: &quot;testData&quot;</code></pre><p>  }); </p>
</li>
<li><p>由于<code>&lt;script&gt;</code>元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了foo函数，该函数就会立即调用。作为参数的JSON数据被视为JavaScript对象，而不是字符串，因此避免了使用JSON.parse的步骤。</p>
</li>
</ul>
<p>注意,一般的JSONP接口和普通接口返回数据是有区别的,所以接口如果要做JSONO兼容,需要进行判断是否有对应callback关键字参数,如果有则是JSONP请求,返回JSONP数据,否则返回普通数据</p>
<blockquote>
<p><strong>使用注意:</strong> 基于JSONP的实现原理,所以JSONP只能是“GET”请求,不能进行较为复杂的POST和其它请求,所以遇到那种情况,就得参考下面的CORS解决跨域了(所以如今它也基本被淘汰了)</p>
</blockquote>
<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>WebSocket是一种通信协议，使用<code>ws://</code>（非加密）和<code>wss://</code>（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</p>
<p>下面是一个例子，浏览器发出的WebSocket请求的头信息</p>
<pre><code>GET /chat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
Origin: http://example.com</code></pre><p>上面代码中，有一个字段是<code>Origin</code>，表示该请求的请求源（origin），即发自哪个域名。</p>
<p>正是因为有了<code>Origin</code>这个字段，所以WebSocket才没有实行同源政策。因为服务器可以根据这个字段，判断是否许可本次通信。如果该域名在白名单内，服务器就会做出如下回应。</p>
<pre><code>HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=
Sec-WebSocket-Protocol: chat</code></pre><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p>
<p>它允许浏览器向跨源服务器，发出<code>XMLHttpRequest</code>请求，从而克服了AJAX只能同源使用的限制。</p>
<h3 id="CORS简介"><a href="#CORS简介" class="headerlink" title="CORS简介"></a>CORS简介</h3><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p>
<p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p>
<p>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p>
<p>基本上目前所有的浏览器都实现了CORS标准,其实目前几乎所有的浏览器ajax请求都是基于CORS机制的,只不过可能平时前端开发人员并不关心而已(所以说其实现在CORS解决方案主要是考虑后台该如何实现的问题)。</p>
<p>这里也整理了一个实现原理图(简化版)</p>
<p><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/20190418-2_articlex.png" alt="CORS"></p>
<h3 id="如何判断是否是简单请求"><a href="#如何判断是否是简单请求" class="headerlink" title="如何判断是否是简单请求?"></a>如何判断是否是简单请求?</h3><p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。只要同时满足以下两大条件，就属于简单请求</p>
<p>（1) 请求方法是以下三种方法之一：</p>
<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
<p>（2）HTTP的头信息不超出以下几种字段：</p>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/- form-data、text/plain</li>
</ul>
<p>凡是不同时满足上面两个条件，就属于非简单请求。</p>
<p>浏览器对这两种请求的处理，是不一样的。</p>
<p><em>待续。。</em></p>
]]></content>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 远程分支相关操作</title>
    <url>/2020/04/07/Git-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="git-拉取远程分支到本地"><a href="#git-拉取远程分支到本地" class="headerlink" title="git 拉取远程分支到本地"></a>git 拉取远程分支到本地</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line"></span><br><span class="line">// 添加远程仓库连接</span><br><span class="line">git remote add origin git@github.com:XXXX/nothing2.git</span><br><span class="line"></span><br><span class="line">// 把远程分支拉到本地</span><br><span class="line">git fetch origin [dev]（dev为远程仓库的分支名）</span><br><span class="line"></span><br><span class="line">// 在本地创建分支dev并切换到该分支</span><br><span class="line">git checkout -b [dev] (本地分支名称) [origin/dev](远程分支名称)</span><br><span class="line"></span><br><span class="line">// 把某个分支上的内容都拉取到本地</span><br><span class="line">git pull origin [dev] (远程分支名称)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="如何解决failed-to-push-some-refs-to-git"><a href="#如何解决failed-to-push-some-refs-to-git" class="headerlink" title="如何解决failed to push some refs to git"></a>如何解决failed to push some refs to git</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 尝试提交到远程master分支上 出错</span><br><span class="line">git push -u origin master // failed to push some refs to <span class="string">&#x27;git@github.com: xxx/xxx.git&#x27;</span></span><br><span class="line"></span><br><span class="line">// 主要是因为README.md文件和本地文件有差异</span><br><span class="line">// 通过该命令进行代码合并： [pull = fetch + merge]</span><br><span class="line">git pull --rebase origin master</span><br><span class="line"></span><br><span class="line">// 重新push代码</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h2 id="聊一下git-pull-rebase"><a href="#聊一下git-pull-rebase" class="headerlink" title="聊一下git pull rebase"></a>聊一下<em>git pull rebase</em></h2><blockquote>
<p><a href="https://www.cnblogs.com/wangiqngpei557/p/6056624.html">参考文章</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello world</title>
    <url>/2019/02/10/Hello%20world/</url>
    <content><![CDATA[<p><strong>Hello world</strong></p>
<p>stay hungry， stay foolish.</p>
<blockquote>
<p><em>求知若饥 虚心若愚</em></p>
</blockquote>
<p>这里是pipipig的无名小站！谢谢你来这里。</p>
]]></content>
  </entry>
  <entry>
    <title>Rest 参数与 Spread 操作符</title>
    <url>/2019/05/08/Rest-%E5%8F%82%E6%95%B0%E4%B8%8E-Spread-%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    <content><![CDATA[<blockquote>
<p>参考资料：<a href="https://zh.javascript.info/rest-parameters-spread-operator#spread-operator">Rest 参数与 Spread 操作符</a></p>
</blockquote>
<h1 id="Rest-参数与-Spread-操作符"><a href="#Rest-参数与-Spread-操作符" class="headerlink" title="Rest 参数与 Spread 操作符"></a>Rest 参数与 Spread 操作符</h1><p>在 JavaScript 中，很多内建函数都支持传入任意个参数。<br>例如：</p>
<p>Math.max(arg1, arg2, …, argN) —— 返回入参中的最大值。</p>
<p>Object.assign(dest, src1, …, srcN) —— 依次合并 src1..N 的属性到 dest。<br>…等等。</p>
<h2 id="剩余参数（Rest"><a href="#剩余参数（Rest" class="headerlink" title="剩余参数（Rest)"></a>剩余参数（Rest)</h2><p>在 JavaScript 中，无论函数定义了多少个形参，你都可以传入任意个实参进行调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert( sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) );</span><br></pre></td></tr></table></figure>
<p>虽然这里不会因为传入“过多”的参数而报错，但是<strong>多余的参数也不会起任何作用</strong>，函数只会返回前两个参数相加的结果。</p>
<p>针对上例，我们可以在定义函数时使用 Rest 参数，Rest 参数的操作符表示为3个点 <code>...</code>。直白地讲，它的意思就是<strong>把剩余的参数都放到一个数组中</strong>。</p>
<p>两个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumAll</span>(<span class="params">...args</span>) </span>&#123; <span class="comment">// 数组变量名为 args</span></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> arg <span class="keyword">of</span> args) sum += arg;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert( sumAll(<span class="number">1</span>) ); <span class="comment">// 1</span></span><br><span class="line">alert( sumAll(<span class="number">1</span>, <span class="number">2</span>) ); <span class="comment">// 3</span></span><br><span class="line">alert( sumAll(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) ); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params">firstName, lastName, ...titles</span>) </span>&#123;</span><br><span class="line">  alert( firstName + <span class="string">&#x27; &#x27;</span> + lastName ); <span class="comment">// Julius Caesar</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// titles 数组中包含了剩余的参数</span></span><br><span class="line">  <span class="comment">// 也就是有 titles = [&quot;Consul&quot;, &quot;Imperator&quot;]</span></span><br><span class="line">  alert( titles[<span class="number">0</span>] ); <span class="comment">// Consul</span></span><br><span class="line">  alert( titles[<span class="number">1</span>] ); <span class="comment">// Imperator</span></span><br><span class="line">  alert( titles.length ); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showName(<span class="string">&quot;Julius&quot;</span>, <span class="string">&quot;Caesar&quot;</span>, <span class="string">&quot;Consul&quot;</span>, <span class="string">&quot;Imperator&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Rest 参数必须放到参数列表的末尾</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">arg1, ...rest, arg2</span>) </span>&#123;   <span class="comment">// error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 JavaScript 引入 Rest 参数之前，无论入参数是多是少，想获取所有的入参只能使用 <code>arguments</code>。</p>
<p>即使 arguments 是一个类数组且可遍历的变量，但它终究不是数组。它没有数组原型链上的函数，我们没法直接调用诸如 arguments.map(…) 等这样的函数。 现在用rest代替更好。</p>
<blockquote>
<p>箭头函数是没有 “arguments” 的 而且也没有this</p>
</blockquote>
<h2 id="展开操作符操作符（Spread）"><a href="#展开操作符操作符（Spread）" class="headerlink" title="展开操作符操作符（Spread）"></a>展开操作符操作符（Spread）</h2><p>例子：<br>内建函数 Math.max 会返回参数中最大的值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert( <span class="built_in">Math</span>.max(<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>) ); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>];</span><br><span class="line">alert( <span class="built_in">Math</span>.max(arr) ); <span class="comment">// NaN   Math.max 期待你传入一系列的数值型参数</span></span><br></pre></td></tr></table></figure>

<p>当在函数调用时使用Spread 操作符 <code>...arr</code>，它会把可迭代的对象 arr <strong>展开</strong>为参数列表。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">8</span>, <span class="number">3</span>, -<span class="number">8</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">alert( <span class="built_in">Math</span>.max(...arr1, ...arr2) ); <span class="comment">// 8 可以传递多个被展开的迭代对象</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">8</span>, <span class="number">3</span>, -<span class="number">8</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">alert( <span class="built_in">Math</span>.max(<span class="number">1</span>, ...arr1, <span class="number">2</span>, ...arr2, <span class="number">25</span>) ); <span class="comment">// 25 在普通的参数间使用展开操作符</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">8</span>, <span class="number">9</span>, <span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> merged = [<span class="number">0</span>, ...arr, <span class="number">2</span>, ...arr2]; <span class="comment">//使用 Spread 操作符合并数组</span></span><br><span class="line"></span><br><span class="line">alert(merged); <span class="comment">// 0,3,5,1,2,8,9,15（0，然后是 arr 的值，2，然后是 arr2 的值）</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello&quot;</span>; <span class="comment">//使用 Spread 操作符把字符串展开为字符数组</span></span><br><span class="line"></span><br><span class="line">alert( [...str] ); <span class="comment">// H,e,l,l,o</span></span><br></pre></td></tr></table></figure>

<p>JavaScript 内部使用了遍历器来实现 Spread 操作符，因此使用 <code>Spread</code> 操作符展开对象与使用 <code>for..of</code> 遍历该对象是一致的。</p>
<p>所以，针对一个字符串，<code>for..of</code>会逐位返回该字符串中的字符，<code>...str</code>1 也同理会得到<code>&quot;H&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;</code>这样的结果。再将上一步所得的字符串序列传入数组初始化操作符 <code>[...str]</code>，一个字符数组就这样生成了。</p>
<p>我们还可以使用 Array.from 实现上述功能，因为该操作符会将可遍历对象（如字符串）转换为数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.from 会将可遍历对象转为数组</span></span><br><span class="line">alert( <span class="built_in">Array</span>.from(str) ); <span class="comment">// H,e,l,l,o //运行结果与 [...str] 结果一致。</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>不过需要注意的是使用 Array.from(obj) 和使用 […obj] 还是存在细微差别：<br>Array.from 同时适用于类数组对象和可遍历对象。<br>Spread 操作符只能操作可遍历对象。<br>因此，若希望把一些<code>“东西”</code>转为数组，使用 Array.from 将更为通用。</p>
</blockquote>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>当我们在代码中遇到 “…” 时，它不是 Rest 参数就是 Spread 操作符。</p>
<p>我们可以使用下列方法区分二者：</p>
<ul>
<li><p>若 … 出现在函数的参数列表，那它表示的就是 Rest 参数，它会把函数多余的实参收集到一个数组中。</p>
</li>
<li><p>若 … 出现在函数调用或类似的表达式中，那它就是 Spread 操作符，它会把一个数组展开为逗号分隔的元素列表。</p>
</li>
</ul>
<p>使用场景：</p>
<ul>
<li><p>Rest 参数用于创建可接收任意个参数的函数。</p>
</li>
<li><p>Spread 操作符可以在函数调用传参时，把含有参数的数组展开为函数需要的参数列表形式。</p>
</li>
</ul>
<p>这两个操作符的出现方便了我们在参数数组和参数列表间来回转换。</p>
<p>“旧式”的 arguments（类数组对象）也依然能够帮助我们获取函数调用时的所有参数。</p>
]]></content>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP三次握手与四次挥手</title>
    <url>/2019/04/08/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
    <content><![CDATA[<blockquote>
<p>参考资料：<a href="https://blog.csdn.net/sinat_36629696/article/details/80740678">https://blog.csdn.net/sinat_36629696/article/details/80740678</a><br><a href="https://blog.csdn.net/qq_38950316/article/details/81087809">https://blog.csdn.net/qq_38950316/article/details/81087809</a></p>
</blockquote>
<h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p>TCP协议全称: 传输控制协议, 顾名思义, 就是要对数据的传输进行一定的控制.<br><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/20180717201939345.jpg" alt="TCP报头"><br>我们来分析分析每部分的含义和作用</p>
<ul>
<li><p>源端口号/目的端口号: 表示数据从哪个进程来, 到哪个进程去.</p>
</li>
<li><p>32位序号:</p>
<blockquote>
<p> 序列号<code>seq</code>：占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号</p>
</blockquote>
</li>
<li><p>32位确认号： </p>
<blockquote>
<p>确认号<code>ack</code>：占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段最后一个字节的编号+1即为确认号。</p>
</blockquote>
</li>
<li><p>4位首部长度: 表示该tcp报头有多少个4字节(32个bit)</p>
</li>
<li><p>6位保留: 顾名思义, 先保留着, 以防万一</p>
</li>
<li><p>6位标志位</p>
<blockquote>
<ul>
<li>URG: 标识紧急指针是否有效 </li>
<li>ACK: 标识确认序号是否有效 </li>
<li>PSH: 用来提示接收端应用程序立刻将数据从tcp缓冲区读走 </li>
<li>RST: 要求重新建立连接. 我们把含有RST标识的报文称为复位报文段 </li>
<li>SYN: 请求建立连接. 我们把含有SYN标识的报文称为同步报文段 </li>
<li>FIN: 通知对端, 本端即将关闭. 我们把含有FIN标识的报文称为结束报文段</li>
</ul>
</blockquote>
</li>
<li><p>16位窗口大小:</p>
</li>
<li><p>16位检验和: 由发送端填充, 检验形式有CRC校验等. 如果接收端校验不通过, 则认为数据有问题. 此处的校验和不光包含TCP首部, 也包含TCP数据部分.</p>
</li>
<li><p>16位紧急指针: 用来标识哪部分数据是紧急数据.<br>选项和数据暂时忽略</p>
</li>
</ul>
<blockquote>
<p> PS：ACK、SYN和FIN这些大写的单词表示标志位，其值要么是1，要么是0；ack、seq小写的单词表示序号</p>
</blockquote>
<table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>URG</td>
<td>紧急指针是否有效。为1，表示某一位需要被优先处理</td>
</tr>
<tr>
<td>ACK</td>
<td>确认号是否有效，一般置为1。</td>
</tr>
<tr>
<td>PSH</td>
<td>提示接收端应用程序立即从TCP缓冲区把数据读走。</td>
</tr>
<tr>
<td>RST</td>
<td>对方要求重新建立连接，复位。</td>
</tr>
<tr>
<td>SYN</td>
<td>请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1</td>
</tr>
<tr>
<td>FIN</td>
<td>希望断开连接。</td>
</tr>
</tbody></table>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><strong>TCP的连接建立是一个三次握手过程，目的是为了通信双方确认开始序号，以便后续</strong><br><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/20180717202520531.png" alt="三次握手"><br>主要步骤如下：<br>第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。</p>
<p>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p>
<p>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p><strong>TCP终止连接的四次挥手过程如下：</strong><br><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/20180717204202563.png" alt="四次挥手"></p>
<ol>
<li><p>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，<code>FIN=1</code>，其序列号为<code>seq=u</code>（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入 <code>FIN-WAIT-1</code>（终止等待1）状态。 TCP规定，<code>FIN</code>报文段即使不携带数据，也要消耗一个序号。  </p>
</li>
<li><p>服务器收到连接释放报文，发出确认报文，<code>ACK=1，ack=u+1</code>，并且带上自己的序列号<code>seq=v</code>，此时，服务端就进入了 <code>CLOSE-WAIT</code>（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个 <code>CLOSE-WAIT</code> 状态持续的时间。  </p>
</li>
<li><p>客户端收到服务器的确认请求后，此时，客户端就进入 <code>FIN-WAIT-2</code>（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。 </p>
</li>
<li><p>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，<code>FIN=1，ack=u+1</code>，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为<code>seq=w</code>，此时，服务器就进入了 <code>LAST-ACK</code>（最后确认）状态，等待客户端的确认。  </p>
</li>
<li><p>客户端收到服务器的连接释放报文后，必须发出确认，<code>ACK=1，ack=w+1</code>，而自己的序列号是<code>seq=u+1</code>，此时，客户端就进入了<code>TIME-WAIT</code>（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗<code>MSL</code>（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入<code>CLOSED</code>状态。 </p>
</li>
<li><p>服务器只要收到了客户端发出的确认，立即进入<code>CLOSED</code>状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，<em>服务器结束TCP连接的时间要比客户端早一些</em>。</p>
</li>
</ol>
<blockquote>
<p>补充引用链接：<a href="https://www.cnblogs.com/zmlctt/p/3690998.html">https://www.cnblogs.com/zmlctt/p/3690998.html</a><br><a href="https://mp.weixin.qq.com/s/L-eSLMFQGVmVJzmqHgFHtw">https://mp.weixin.qq.com/s/L-eSLMFQGVmVJzmqHgFHtw</a></p>
</blockquote>
<h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><ol>
<li><p>为什么连接的时候是三次握手，关闭的时候却是四次握手？</p>
<blockquote>
<p>因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p>
</blockquote>
</li>
<li><p>为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</p>
<blockquote>
<p>虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。<br>所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。在Client发送出最后的ACK回复，但该ACK可能丢失。Server如果没有收到ACK，将不断重复发送FIN片段。所以Client不能立即关闭，它必须确认Server接收到了该ACK。Client会在发送出ACK之后进入到TIME_WAIT状态。Client会设置一个计时器，等待2MSL的时间。如果在该时间内再次收到FIN，那么Client会重发ACK并再次等待2MSL。<br>所谓的2MSL是两倍的MSL(Maximum Segment Lifetime)。MSL指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接。</p>
</blockquote>
</li>
<li><p>为什么不能用两次握手进行连接？</p>
<blockquote>
<p>3次握手完成两个重要的功能，既要双方做好发送数据的准备工作(双方都知道彼此已准备好)，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。<br>现在把三次握手改成仅需要两次握手，死锁是可能发生的。作为例子，考虑计算机S和C之间的通信，假定C给S发送一个连接请求分组，S收到了这个分组，并发 送了确认应答分组。按照两次握手的协定，S认为连接已经成功地建立了，可以开始发送数据分组。可是，C在S的应答分组在传输中被丢失的情况下，将不知道S 是否已准备好，不知道S建立什么样的序列号，C甚至怀疑S是否收到自己的连接请求分组。在这种情况下，C认为连接还未建立成功，将忽略S发来的任何数据分 组，只等待连接确认应答分组。而S在发出的分组超时后，重复发送同样的分组。这样就形成了死锁。</p>
</blockquote>
</li>
<li><p>如果已经建立了连接，但是客户端突然出现故障了怎么办？</p>
<blockquote>
<p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔<strong>75秒钟</strong>发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>
</blockquote>
</li>
</ol>
]]></content>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax工作原理</title>
    <url>/2019/05/09/ajax%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="ajax工作原理"><a href="#ajax工作原理" class="headerlink" title="ajax工作原理"></a>ajax工作原理</h1><blockquote>
<p>参考资料：<a href="http://www.cnblogs.com/mingmingruyuedlut/archive/2011/10/18/2216553.html">http://www.cnblogs.com/mingmingruyuedlut/archive/2011/10/18/2216553.html</a></p>
</blockquote>
<h2 id="AJAX的名字"><a href="#AJAX的名字" class="headerlink" title="AJAX的名字"></a>AJAX的名字</h2><p>ajax 的全称是<code>Asynchronous JavaScript and XML</code>，其中，<code>Asynchronous</code> 是异步的意思，它有别于传统web开发中采用的同步的方式。</p>
<h2 id="异步和同步"><a href="#异步和同步" class="headerlink" title="异步和同步"></a>异步和同步</h2><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul>
<li>面向字符（单位：比特）</li>
<li>将byte分成小组进行传输（一般8个字符)</li>
<li>小组的（头/尾）分别有（开始位/结束位）</li>
<li>传输过程中发送方和接收方时钟不要求一致</li>
<li>发送方可以在任何时刻发送，而接收方并不知道数据什么时候到达</li>
<li>开始位：它通知接收方数据已经到达了，这就给了接收方响应、接收 和缓存数据比特的时间</li>
</ul>
<h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><ul>
<li>面向比特（单位：数据帧/帧）</li>
<li>要求：接收方和发送方的时钟保持一致</li>
<li>同步的比特分组要大得多</li>
<li>不单独发送，而是组合发送（发送帧）</li>
</ul>
<p><strong>数据帧</strong>：</p>
<hr>
<hr>
<ul>
<li><em>开始部分</em>： 一个独特的比特（一组同步字符）</li>
<li>作用：通知帧到达（相当于起始位），确保接收方的采样速度和比特的到达速度一致，保持同步。</li>
</ul>
<hr>
<ul>
<li><em>中间部分</em></li>
</ul>
<hr>
<ul>
<li><em>尾部</em>：帧结束标记</li>
<li>作用： 表示在下一帧开始之前没有别的数据了</li>
</ul>
<hr>
<hr>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><ol>
<li><p>同步传输通常要比异步传输快速得多。</p>
<blockquote>
<p>接收方不必对每个字符进行开始和停止的操作。一旦检测到帧同步字符，它就在接下来的数据到达时接收它们</p>
</blockquote>
</li>
<li><p>同步传输的开销也比较少</p>
<blockquote>
<p>一个典型的帧可能有500字节（即4000比特）的数据，其中可能只包含100比特的开销。这时，增加的比特位使传输的比特总数增加2.5%，这与异步传输中25 %的增值要小得多</p>
</blockquote>
</li>
<li><p>随着数据帧中实际数据比特位的增加，开销比特所占的百分比将相应地减少</p>
</li>
<li><p>但是，数据比特位越长，缓存数据所需要的缓冲区也越大，这就限制了一个帧的大小 </p>
</li>
<li><p>帧越大，它占据传输媒体的连续时间也越长。在极端的情况下，这将导致其他用户等得太久</p>
</li>
</ol>
<blockquote>
<p>了解了同步和异步的概念之后，大家应该对ajax为什么可以提升用户体验应该比较清晰了，它是利用<code>异步</code>请求方式的。  </p>
</blockquote>
<blockquote>
<p>打个比方，如果现在你家里所在的小区因 某种情况而面临停水，现在有关部门公布了两种方案，一是完全停水8个小时，在这8个小时内完全停水，8个小时后恢复正常。二是不完全停水10个小时，在这10个小时内水没有完全断，只是流量比原来小了很多，在10个小时后恢复正常流量，那么，如果是你你会选择哪种方式呢？显然是后者。</p>
</blockquote>
<h2 id="ajax所包含的技术"><a href="#ajax所包含的技术" class="headerlink" title="ajax所包含的技术"></a>ajax所包含的技术</h2><ol>
<li><p>使用<code>CSS</code>和<code>XHTML</code>来表示。  </p>
</li>
<li><p>使用<code>DOM</code>模型来交互和动态显示。  </p>
</li>
<li><p>使用<code>XMLHttpRequest</code>来和<code>服务器</code>进行异步通信。</p>
</li>
<li><p>使用<code>javascript</code>来绑定和调用。</p>
</li>
</ol>
<p>在上面几中技术中，除了<code>XmlHttpRequest</code>对象以外，其它所有的技术都是基于web标准并且已经得到了广泛使用的，<code>XMLHttpRequest</code>虽然目前还没有被W3C所采纳，但是它已经是一个事实的标准，因为目前几乎所有的主流浏览器都支持它。</p>
<h2 id="ajax原理和XmlHttpRequest对象"><a href="#ajax原理和XmlHttpRequest对象" class="headerlink" title="ajax原理和XmlHttpRequest对象"></a>ajax原理和XmlHttpRequest对象</h2><h3 id="Ajax的原理："><a href="#Ajax的原理：" class="headerlink" title="Ajax的原理："></a>Ajax的原理：</h3><ul>
<li>通过XmlHttpRequest对象来向服务器发异步请求</li>
<li>从服务器获得数据</li>
<li>用javascript来操作DOM而更新页面。<blockquote>
<p>这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 <code>XMLHttpRequest</code>有所了解。</p>
</blockquote>
</li>
</ul>
<p><code>XMLHttpRequest</code>是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。<br>简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。</p>
<h3 id="XMLHttpRequest对象的属性"><a href="#XMLHttpRequest对象的属性" class="headerlink" title="XMLHttpRequest对象的属性"></a>XMLHttpRequest对象的属性</h3><p>它的属性有：</p>
<ul>
<li><code>onreadystatechange</code> 每次状态改变所触发事件的事件处理程序。</li>
<li><code>responseText</code>       从服务器进程返回数据的字符串形式。</li>
<li><code>responseXML</code>               从服务器进程返回的DOM兼容的文档数据对象。</li>
<li><code>status</code>                从服务器返回的数字代码，比如常见的404（未找到）和200（已就绪）</li>
<li><code>status Text</code>              伴随状态码的字符串信息</li>
<li><code>readyState</code>               对象状态值<blockquote>
<ul>
<li>0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）</li>
<li>1 (初始化) 对象已建立，尚未调用send方法</li>
<li>2 (发送数据) send方法已调用，但是当前的状态及http头未知</li>
<li>3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误</li>
<li>4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="创建XMLHttpRequest对象的方法"><a href="#创建XMLHttpRequest对象的方法" class="headerlink" title="创建XMLHttpRequest对象的方法"></a>创建XMLHttpRequest对象的方法</h3><p>由于各浏览器之间存在差异，所以创建一个<code>XMLHttpRequest</code>对象可能需要不同的方法。这个差异主要体现在IE和其它浏览器之间。下面是一个比较标准的创建<code>XMLHttpRequest</code>对象的方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateXmlHttp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非IE浏览器创建XmlHttpRequest对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XmlHttpRequest) &#123;</span><br><span class="line">        xmlhttp = <span class="keyword">new</span> XmlHttpRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//IE浏览器创建XmlHttpRequest对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;msxml2.XMLHTTP&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (ex) &#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ustbwuyi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>).value;</span><br><span class="line">    CreateXmlHttp();</span><br><span class="line">    <span class="keyword">if</span> (!xmlhttp) &#123;</span><br><span class="line">        alert(<span class="string">&quot;创建xmlhttp对象异常！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xmlhttp.open(<span class="string">&quot;POST&quot;</span>, url, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;user1&quot;</span>).innerHTML = <span class="string">&quot;数据正在加载...&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (xmlhttp.status == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="built_in">document</span>.write(xmlhttp.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xmlhttp.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上所示，函数首先检查<code>XMLHttpRequest</code>的整体状态并且保证它已经完成（<code>readyStatus=4</code>），即数据已经发送完毕。然后根据服务器的设定询问请求状态，如果一切已经就绪（<code>status=200</code>），那么就执行下面需要的操作。</p>
<p>对于XmlHttpRequest的两个方法，<code>open</code>和<code>send</code>，其中<code>open</code>方法指定了：</p>
<p>a、向服务器提交数据的类型，即<code>post</code>还是<code>get</code>。</p>
<p>b、请求的url地址和传递的参数。</p>
<p>c、传输方式，false为同步，true为异步。默认为true。如果是异步通信方式(true)，客户机就不等待服务器的响应；如果是同步方式(false)，客户机就要等到服务器返回消息后才去执行其他操作。我们需要根据实际需要来指定同步方式，在某些页面中，可能会发出多个请求，甚至是有组织有计划有队形大规模的高强度的request，而后一个是会覆盖前一个的，这个时候当然要指定同步方式。</p>
<p><code>Send</code>方法用来发送请求。</p>
<h3 id="ajax的原理"><a href="#ajax的原理" class="headerlink" title="ajax的原理"></a>ajax的原理</h3><p>我们可以看出，<code>XMLHttpRequest</code>是完全用来向服务器发出一个请求的，它的作用也局限于此，但它的作用是整个ajax实现的关键，因为ajax无非是两个过程，<strong>发出请求</strong>和<strong>响应请求</strong>。<br>并且它完全是一种客户端的技术。而XMLHttpRequest正是处理了服务器端和客户端通信的问题所以才会如此的重要。</p>
<blockquote>
<p>我们可以把服务器端看成一个数据接口，它返回的是一个纯文本流，当然，这个文本流可以是XML格式，可以是Html，可以是Javascript代码，也可以只是一个字符串。这时候，XMLHttpRequest向服务器端请求这个页面，服务器端将文本的结果写入页面，这和普通的web开发流程是一样的，不同的是，客户端在异步获取这个结果后，不是直接显示在页面，而是先由javascript来处理，然后再显示在页面。至于现在流行的很多ajax控件，比如magicajax等，可以返回DataSet等其它数据类型，只是将这个过程封装了的结果，本质上他们并没有什么太大的区别。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/9NiepNyQar.png" alt="图示"></p>
<h2 id="ajax的优点"><a href="#ajax的优点" class="headerlink" title="ajax的优点"></a>ajax的优点</h2><ul>
<li><p>最大的一点是页面无刷新，在页面内与服务器通信，给用户的<strong>体验</strong>非常好。</p>
</li>
<li><p>使用异步方式与服务器通信，不需要打断用户的操作，具有<strong>更加迅速的响应能力</strong>。</p>
</li>
<li><p>可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，<strong>减轻服务器和带宽的负担</strong>，节约空间和宽带租用成本。并且减轻服务器的负担，ajax的原则是“按需取数据”，可以最大程度的减少冗余请求，和响应对服务器造成的负担。</p>
</li>
<li><p>基于标准化的并被<strong>广泛支持</strong>的技术，不需要下载插件或者小程序。</p>
</li>
</ul>
<h2 id="ajax的缺点"><a href="#ajax的缺点" class="headerlink" title="ajax的缺点"></a>ajax的缺点</h2><ol>
<li><p>ajax干掉了back按钮，即对浏览器后退机制的破坏。后退按钮是一个标准的web站点的重要功能，但是它没法和js进行很好的合作。这是ajax所带来的一个比较严重的问题，因为用户往往是希望能够通过后退来取消前一次操作的。解决办法：用过Gmail的知道，Gmail下面采用的ajax技术解决了这个问题，在Gmail下面是可以后退的，但是，它也并不能改变ajax的机制，它只是采用的一个比较笨但是有效的办法，即用户单击后退按钮访问历史记录时，通过创建或使用一个隐藏的IFRAME来重现页面上的变更。</p>
<blockquote>
<p>（例如，当用户在Google Maps中单击后退时，它在一个隐藏的IFRAME中进行搜索，然后将搜索结果反映到Ajax元素上，以便将应用程序状态恢复到当时的状态。）<br>但是，虽然说这个问题是可以解决的，但是它所带来的开发成本是非常高的，和ajax框架所要求的快速开发是相背离的。这是ajax所带来的一个非常严重的问题。</p>
</blockquote>
</li>
<li><p><strong>安全问题</strong><br>技术同时也对IT企业带来了新的安全威胁，ajax技术就如同对企业数据建立了一个直接通道。这使得开发者在不经意间会暴露比以前更多的数据和服务器逻辑。ajax的逻辑可以对客户端的安全扫描技术隐藏起来，允许黑客从远端服务器上建立新的攻击。还有ajax也难以避免一些已知的安全弱点，诸如跨站点脚步攻击、SQL注入攻击和基于credentials的安全漏洞等。</p>
</li>
<li><p><strong>对搜索引擎的支持比较弱</strong>。</p>
</li>
<li><p><strong>破坏</strong>了程序的<strong>异常机制</strong>。至少从目前看来，像ajax.dll，ajaxpro.dll这些ajax框架是会破坏程序的异常机制的。关于这个问题，我曾经在开发过程中遇到过，但是查了一下网上几乎没有相关的介绍。后来我自己做了一次试验，分别采用ajax和传统的form提交的模式来删除一条数据……给我们的调试带来了很大的困难。</p>
</li>
<li><p>另外，像其他方面的一些问题，比如说违背了url和资源定位的初衷。例如，我给你一个url地址，如果采用了ajax技术，也许你在该url地址下面看到的和我在这个url地址下看到的内容是不同的。这个和资源定位的初衷是相背离的。</p>
</li>
<li><p>一些手持设备（如手机、PDA等）现在还不能很好的支持ajax，比如说我们在手机的浏览器上打开采用ajax技术的网站时，它目前是不支持的，当然，这个问题和我们没太多关系。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>ajax</tag>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>css文字省略</title>
    <url>/2020/03/19/css%E6%96%87%E5%AD%97%E7%9C%81%E7%95%A5/</url>
    <content><![CDATA[<h1 id="单行文字省略"><a href="#单行文字省略" class="headerlink" title="单行文字省略"></a>单行文字省略</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</span><br></pre></td></tr></table></figure>

<h1 id="多行文字实现-有浏览器兼容性问题"><a href="#多行文字实现-有浏览器兼容性问题" class="headerlink" title="多行文字实现(有浏览器兼容性问题)"></a>多行文字实现(有浏览器兼容性问题)</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">-webkit-line-clamp</span>: 3; </span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>;</span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>java8的JVM持久代--何去何从？</title>
    <url>/2019/02/23/java8%E7%9A%84JVM%E6%8C%81%E4%B9%85%E4%BB%A3%E2%80%94%E2%80%94%E4%BD%95%E5%8E%BB%E4%BD%95%E4%BB%8E%EF%BC%9F/</url>
    <content><![CDATA[<blockquote>
<p>原帖地址： <a href="https://blog.csdn.net/yechaodechuntian/article/details/40341975">https://blog.csdn.net/yechaodechuntian/article/details/40341975</a></p>
</blockquote>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>JVM只不过是运行在你系统上的另一个进程而已，这一切的魔法始于一个java命令。正如任何一个操作系统进程那样，JVM也需要内存来完成它的运行时操作。记住——JVM本身是硬件的一层软件抽象，在这之上才能够运行Java程序，也才有了我们所吹嘘的平台独立性以及WORA（一次编写，处处运行）。</p>
<h2 id="快速过一遍JVM的内存结构"><a href="#快速过一遍JVM的内存结构" class="headerlink" title="快速过一遍JVM的内存结构"></a>快速过一遍JVM的内存结构</h2><p>正如虚拟机规范所说的那样，JVM中的内存分为5个虚拟的区域。</p>
<ul>
<li>堆</li>
<li>方法区（非堆）</li>
<li>JVM栈</li>
<li>本地栈</li>
<li>PC寄存器</li>
</ul>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><ul>
<li>你的Java程序中所分配的每一个对象都需要存储在内存里。堆是这些实例化的对象所存储的地方。是的——都怪new操作符，是它把你的Java堆都占满了的！</li>
<li>它由所有线程共享</li>
<li>当堆耗尽的时候，JVM会抛出java.lang.OutOfMemoryError 异常</li>
<li>堆的大小可以通过JVM选项-Xms和-Xmx来进行调整</li>
</ul>
<h2 id="堆被分为："><a href="#堆被分为：" class="headerlink" title="堆被分为："></a>堆被分为：</h2><ul>
<li>Eden区 —— 新对象或者生命周期很短的对象会存储在这个区域中，这个区的大小可以通过-XX:NewSize和-XX:MaxNewSize参数来调整。新生代GC（垃圾回收器）会清理这一区域。</li>
<li>Survivor区 —— 那些历经了Eden区的垃圾回收仍能存活下来的依旧存在引用的对象会待在这个区域。这个区的大小可以由JVM参数-XX:SurvivorRatio来进行调节。</li>
<li>老年代 —— 那些在历经了Eden区和Survivor区的多次GC后仍然存活下来的对象（当然了，是拜那些挥之不去的引用所赐）会存储在这个区里。这个区会由一个特殊的垃圾回收器来负责。年老代中的对象的回收是由老年代的GC（major GC）来进行的。</li>
</ul>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><ul>
<li>也被称为非堆区域（在HotSpot JVM的实现当中）</li>
<li>它被分为两个主要的子区域</li>
</ul>
<h2 id="持久代"><a href="#持久代" class="headerlink" title="持久代"></a>持久代</h2><p>这个区域会存储包括类定义，结构，字段，方法（数据及代码）以及常量在内的类相关数据。它可以通过-XX:PermSize及-XX:MaxPermSize来进行调节。如果它的空间用完了，会导致java.lang.OutOfMemoryError: PermGen space的异常。</p>
<h2 id="代码缓存"><a href="#代码缓存" class="headerlink" title="代码缓存"></a>代码缓存</h2><p>这个缓存区域是用来存储编译后的代码。编译后的代码就是本地代码（硬件相关的），它是由JIT（Just In Time)编译器生成的，这个编译器是Oracle HotSpot JVM所特有的。</p>
<h1 id="JVM栈"><a href="#JVM栈" class="headerlink" title="JVM栈"></a>JVM栈</h1><ul>
<li>和Java类中的方法密切相关</li>
<li>它会存储局部变量以及方法调用的中间结果及返回值</li>
<li>Java中的每个线程都有自己专属的栈，这个栈是别的线程无法访问的。</li>
<li>可以通过JVM选项-Xss来进行调整</li>
</ul>
<h1 id="本地栈"><a href="#本地栈" class="headerlink" title="本地栈"></a>本地栈</h1><ul>
<li>用于本地方法（非Java代码）</li>
<li>按线程分配</li>
</ul>
<h1 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h1><ul>
<li>特定线程的程序计数器</li>
<li>包含JVM正在执行的指令的地址（如果是本地方法的话它的值则未定义）</li>
</ul>
<p>好吧，这就是JVM内存分区的基础知识了。现在再说说持久代这个话题吧。</p>
<h2 id="那么持久代上哪去了？"><a href="#那么持久代上哪去了？" class="headerlink" title="那么持久代上哪去了？"></a>那么持久代上哪去了？</h2><p>事实上，持久代已经被彻底删除了，取代它的是另一个内存区域也被称为元空间。</p>
<h3 id="元空间-——-快速入门"><a href="#元空间-——-快速入门" class="headerlink" title="元空间 —— 快速入门"></a>元空间 —— 快速入门</h3><ul>
<li>它是本地堆内存中的一部分</li>
<li>它可以通过-XX:MetaspaceSize和-XX:MaxMetaspaceSize来进行调整</li>
<li>当到达XX:MetaspaceSize所指定的阈值后会开始进行清理该区域</li>
<li>如果本地空间的内存用尽了会收到java.lang.OutOfMemoryError: Metadata space的错误信息。</li>
<li>和持久代相关的JVM参数-XX:PermSize及-XX:MaxPermSize将会被忽略掉。</li>
</ul>
<p>当然了，这只是冰山一角。想要更深入地了解JVM，最好的资料莫过于它自己的虚拟机规范了！</p>
]]></content>
      <tags>
        <tag>JVM</tag>
        <tag>java8</tag>
      </tags>
  </entry>
  <entry>
    <title>java到底是解释性语言还是编译型语言？</title>
    <url>/2019/04/16/java%E5%88%B0%E5%BA%95%E6%98%AF%E8%A7%A3%E9%87%8A%E6%80%A7%E8%AF%AD%E8%A8%80%E8%BF%98%E6%98%AF%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%EF%BC%9F/</url>
    <content><![CDATA[<p>Java这个语言很非凡。<br>一、你可以说它是编译型的。因为所有的Java代码都是要编译的，.java不经过编译就什么用都没有。 </p>
<p>二、你可以说它是解释型的。因为java代码编译后不能直接运行，它是解释运行在JVM上的，所以它是解释运行的，那也就算是解释的了。</p>
<p>三、但是，现在的JVM为了效率，都有一些JIT优化。它又会把.class的二进制代码编译为本地的代码直接运行，所以，又是编译的。</p>
<p>像C、C++ 他们经过一次编译之后直接可以编译成操作系统了解的类型，可以直接执行的 所以他们是编译型的语言。没有经过第二次的处理 而Java不一样他首先由编译器编译成.class类型的文件，这个是java自己类型的文件 然后在通过虚拟机(JVM)从.class文件中读一行解释执行一行，所以他是解释型的语言，而由于java对于多种不同的操作系统有不同的JVM所以 Java实现了真正意义上的跨平台！ </p>
<p>请观看下面两张图 了解一下Java的虚拟机机制：</p>
<p>(1)java语言的编译–&gt;解释—&gt;执行过程 </p>
<p><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/20170519090738244.png" alt=""></p>
<p>(2)java的虚拟机 </p>
<p><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/20170519090836650.png" alt=""></p>
<p>今天听到同事在讨论java是哪种类型的语言（编译型、解释型），以前稍微有些接触，但是概念比较模糊，为了不至于让别人的思想左右自己，所以查了些资料，找到了很多热心网友给出的答案，终于有些明白。这里先给出编译型语言和解释型语言的定义。 </p>
<p>定义：<br>编译型语言：把做好的源程序全部编译成二进制代码的可运行程序。然后，可直接运行这个程序。<br>解释型语言：把做好的源程序翻译一句，然后执行一句，直至结束！</p>
<p>区别：<br>编译型语言，执行速度快、效率高；依靠编译器、跨平台性差些。<br>解释型语言，执行速度慢、效率低；依靠解释器、跨平台性好。 </p>
<p>个人认为，java是解释型的语言，因为虽然java也需要编译，编译成.class文件，但是并不是机器可以识别的语言，而是字节码，最终还是需要 jvm的解释，才能在各个平台执行，这同时也是java跨平台的原因。所以可是说java即是编译型的，也是解释型，但是假如非要归类的话，从概念上的定义，恐怕java应该归到解释型的语言中。</p>
<p>附：<br>编译型的语言包括：C、C++、Delphi、Pascal、Fortran<br>解释型的语言包括：Java、Basic、javascript</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>lodash的_.find()</title>
    <url>/2020/04/07/lodash%E7%9A%84-find/</url>
    <content><![CDATA[<h1 id="find-api文档"><a href="#find-api文档" class="headerlink" title="_.find() api文档"></a><strong>_.find()</strong> api文档</h1><p>“集合” 方法(“Collection” Methods)</p>
<blockquote>
<p><em>.find(collection, [predicate=</em>.identity], [fromIndex=0])</p>
</blockquote>
<p>遍历 collection（集合）元素，返回 predicate（断言函数）第一个返回真值的第一个元素。predicate（断言函数）调用3个参数： (value, index|key, collection)。</p>
<h2 id="添加版本"><a href="#添加版本" class="headerlink" title="添加版本"></a>添加版本</h2><p>  0.1.0</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>  collection (Array|Object): 一个用来迭代的集合。<br>  [predicate=_.identity] (Array|Function|Object|string): 每次迭代调用的函数。<br>  [fromIndex=0] (number): 开始搜索的索引位置。</p>
<h2 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h2><p>  (*): 返回匹配元素，否则返回 undefined。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">  &#123; <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;barney&#x27;</span>,  <span class="string">&#x27;age&#x27;</span>: <span class="number">36</span>, <span class="string">&#x27;active&#x27;</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;fred&#x27;</span>,    <span class="string">&#x27;age&#x27;</span>: <span class="number">40</span>, <span class="string">&#x27;active&#x27;</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;pebbles&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">1</span>,  <span class="string">&#x27;active&#x27;</span>: <span class="literal">true</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">_.find(users, <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123; <span class="keyword">return</span> o.age &lt; <span class="number">40</span>; &#125;);</span><br><span class="line"><span class="comment">// =&gt; object for &#x27;barney&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The `_.matches` iteratee shorthand.</span></span><br><span class="line">_.find(users, &#123; <span class="string">&#x27;age&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;active&#x27;</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">// =&gt; object for &#x27;pebbles&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The `_.matchesProperty` iteratee shorthand.</span></span><br><span class="line">_.find(users, [<span class="string">&#x27;active&#x27;</span>, <span class="literal">false</span>]);</span><br><span class="line"><span class="comment">// =&gt; object for &#x27;fred&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The `_.property` iteratee shorthand.</span></span><br><span class="line">_.find(users, <span class="string">&#x27;active&#x27;</span>);</span><br><span class="line"><span class="comment">// =&gt; object for &#x27;barney&#x27;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://codesandbox.io/s/find-demo-teonk?file=/src/App.js">在线demo</a></p>
]]></content>
      <tags>
        <tag>lodash</tag>
      </tags>
  </entry>
  <entry>
    <title>null和undefined与NaN</title>
    <url>/2019/05/07/null%E5%92%8Cundefined%E4%B8%8ENaN/</url>
    <content><![CDATA[<blockquote>
<p>参考资料：<a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html">undefined与null的区别</a></p>
</blockquote>
<blockquote>
<p>参考资料：<a href="https://www.cnblogs.com/syfwhu/p/4434132.html#">47.描述以下变量的区别：null，undefined或undeclared？</a></p>
</blockquote>
<p>大多数计算机语言，有且仅有一个表示”无”的值，比如，<code>C</code>语言的<code>NULL</code>，<code>Java</code>语言的<code>null</code>，<code>Python</code>语言的<code>None</code>，<code>Ruby</code>语言的<code>nil</code>。</p>
<p>有点奇怪的是，<code>JavaScript</code>语言居然有两个表示”无”的值：<code>undefined</code>和<code>null</code>。这是为什么？</p>
<h2 id="相似性"><a href="#相似性" class="headerlink" title="相似性"></a>相似性</h2><p>在javaScript中，将一个变量赋值为<code>undefined</code>或<code>null</code>，老实说，几乎没区别。</p>
<p>undefined和null在if语句中，都会被自动转为false，相等运算符甚至直接报告两者相等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="literal">undefined</span>) </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;undefined is false&#x27;</span>);        <span class="comment">// undefined is false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="literal">null</span>) </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;null is false&#x27;</span>);        <span class="comment">// null is false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">a == b;        <span class="comment">//true</span></span><br><span class="line">a === b;    <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>既然<code>undefined</code>和<code>null</code>的含义与用法都差不多，为什么要同时设置两个这样的值，这不是无端增加JavaScript的复杂度，令初学者困扰吗？Google公司开发的JavaScript语言的替代品<code>Dart</code>语言，就明确规定只有<code>null</code>，没有<code>undefined</code>！</p>
</blockquote>
<p>原来，这与JavaScript的历史有关。1995年JavaScript诞生时，最初像Java一样，只设置了<code>null</code>作为表示”无”的值。</p>
<p>根据C语言的传统，null被设计成可以自动转为0。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)     <span class="comment">// 0</span></span><br><span class="line"><span class="number">5</span> + <span class="literal">null</span>     <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<p>但是，JavaScript的设计者Brendan Eich，觉得这样做还不够，有两个原因。</p>
<p>首先，<code>null</code>像在Java里一样，被当成一个对象。但是，JavaScript的数据类型分成原始类型（primitive）和合成类型（complex）两大类，Brendan Eich觉得表示”无”的值最好不是对象。</p>
<p>其次，JavaScript的最初版本没有包括错误处理机制，发生数据类型不匹配时，往往是自动转换类型或者默默地失败。Brendan Eich觉得，如果<code>null</code>自动转为0，很不容易发现错误。</p>
<p>因此，Brendan Eich又设计了一个<code>undefined</code>。</p>
<h2 id="最初设计"><a href="#最初设计" class="headerlink" title="最初设计"></a>最初设计</h2><p>JavaScript的最初版本是这样区分的：<strong>null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)      <span class="comment">// NaN</span></span><br><span class="line"><span class="number">5</span> + <span class="literal">undefined</span>         <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<h2 id="目前的用法"><a href="#目前的用法" class="headerlink" title="目前的用法"></a>目前的用法</h2><p>但是，上面这样的区分，在实践中很快就被证明不可行。目前，<code>null</code>和<code>undefined</code>基本是同义的，只有一些细微的差别.</p>
<p><strong>null表示”没有对象”，即该处不应该有值</strong>。典型用法是：</p>
<ol>
<li><p>用来初始化一个变量，这个变量可能被赋值为一个对象。</p>
</li>
<li><p>用来和一个已经初始化的变量比较，这个变量可以是也可以不是一个对象。</p>
</li>
<li><p>当函数的参数期望是对象时，被用作参数传入。</p>
</li>
<li><p>当函数的返回值期望是对象时，被用作返回值传出。</p>
</li>
<li><p>作为对象原型链的终点。</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype)     <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<p><strong>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义</strong>。典型用法是：</p>
<ol>
<li><p>变量被声明了，但没有赋值时，就等于undefined。</p>
</li>
<li><p>调用函数时，应该提供的参数没有提供，该参数等于undefined。</p>
</li>
<li><p>对象没有赋值的属性，该属性的值为undefined。</p>
</li>
<li><p>函数没有返回值时，默认返回undefined。</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i;</span><br><span class="line">i <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;<span class="built_in">console</span>.log(x)&#125;</span><br><span class="line">f() <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o.p <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = f();</span><br><span class="line">x <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>对已声明但未初始化的和未声明的变量执行typeof，都返回”undefined”。<br>null表示一个空对象指针，typeof操作会返回”object”。<br>一般不显式的把变量的值设置为undefined，但null相反，对于将要保存对象的变量，应明确的让该变量保存null值。</p>
</blockquote>
<h2 id="该如何检测它们？"><a href="#该如何检测它们？" class="headerlink" title="该如何检测它们？"></a>该如何检测它们？</h2><p>null：表示无值；undefined：表示一个未声明的变量，或已声明但没有赋值的变量，或一个并不存在的对象属性。</p>
<h3 id="JS中如何判断undefined"><a href="#JS中如何判断undefined" class="headerlink" title="JS中如何判断undefined?"></a>JS中如何判断undefined?</h3><p><code>==</code>运算符将两者看作相等。如果要区分两者，要使用<code>===</code>或<code>typeof</code>运算符。</p>
<p><strong>以下是不正确的用法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (exp == <span class="literal">undefined</span>) &#123;</span><br><span class="line">  alert(<span class="string">&quot;undefined&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>exp为<code>null</code>时，也会得到与<code>undefined</code>相同的结果，虽然null和undefined不一样。</p>
<blockquote>
<p>注意：要同时判断undefined和null时可使用本法。</p>
</blockquote>
<p>typeof返回的是字符串，有六种可能：”number”、”string”、”boolean”、”object”、”function”、”undefined”。</p>
<p><strong>以下是正确的用法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params"><span class="keyword">typeof</span>(exp) == <span class="string">&quot;undefined&quot;</span></span>)</span> &#123;</span><br><span class="line">  alert(<span class="string">&quot;undefined&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JS中如何判断null？"><a href="#JS中如何判断null？" class="headerlink" title="JS中如何判断null？"></a>JS中如何判断null？</h3><p><strong>以下是不正确的用法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">exp == <span class="literal">null</span></span>)</span> &#123;</span><br><span class="line">  alert(<span class="string">&quot;is null&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>exp为<code>undefined</code>时，也会得到与<code>null</code>相同的结果，虽然<code>null</code>和<code>undefined</code>不一样。</p>
<blockquote>
<p>注意：要同时判断null和undefined时可使用本法。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">!exp</span>)</span> &#123;</span><br><span class="line">   alert(<span class="string">&quot;is null&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果exp为<code>undefined</code>或者<code>数字零</code>，也会得到与<code>null</code>相同的结果，虽然null和二者不一样。</p>
<blockquote>
<p>注意：要同时判断<code>null</code>、<code>undefined</code>和<code>数字零</code>时可使用本法。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params"><span class="keyword">typeof</span>(exp) == <span class="string">&quot;null&quot;</span></span>)</span> &#123;</span><br><span class="line">  alert(<span class="string">&quot;is null&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了向下兼容，exp为<code>null</code>时，typeof总返回<code>object</code>。这种方式也不太好。</p>
<p><strong>以下是正确的用法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">!exp&amp;&amp;<span class="keyword">typeof</span>(exp) != <span class="string">&quot;undefined&quot;</span> &amp;&amp; exp != <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">  alert(<span class="string">&quot;is null&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="检测对象是否为空对象"><a href="#检测对象是否为空对象" class="headerlink" title="检测对象是否为空对象"></a>检测对象是否为空对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 检测对象是否是空对象(不包含任何可读属性)。</span></span><br><span class="line"><span class="comment">* 方法既检测对象本身的属性，也检测从原型继承的属性(因此没有使hasOwnProperty)。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里所说的空对象，到底是 <code>&#123;&#125;</code> 还是 <code>null</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">a.name = <span class="string">&#x27;realwall&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(isEmpty(a)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmpty(&#123;&#125;)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmpty(<span class="literal">null</span>)); <span class="comment">//true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//注意参数为null时无语法错误哦，即虽然不能对null空指针对象添加属性，但可以使用for in 语句</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 检测对象是否是空对象(不包含任何可读属性)。</span></span><br><span class="line"><span class="comment">* 方法只既检测对象本身的属性，不检测从原型继承的属性。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOwnEmpty</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> name <span class="keyword">in</span> obj</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">obj.hasOwnProperty(name)</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>&#123;&#125;</code>与<code>null</code>的区别：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">null</span>;</span><br><span class="line"> </span><br><span class="line">a.name = <span class="string">&#x27;realwall&#x27;</span>;</span><br><span class="line">b.name = <span class="string">&#x27;jim&#x27;</span>; <span class="comment">//这里会报错，b为空指针对象，不能像普通对象一样直接添加属性。</span></span><br><span class="line">b = a;</span><br><span class="line">b.name = <span class="string">&#x27;jim&#x27;</span>; <span class="comment">//此时 a 和 b 指向同一个对象。a.name, b.name 均为&#x27;jam&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>px,em,rem区别介绍</title>
    <url>/2020/04/09/px-em-rem%E5%8C%BA%E5%88%AB%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p><a href="https://www.runoob.com/w3cnote/px-em-rem-different.html">菜鸟教程原文</a></p>
<h1 id="px"><a href="#px" class="headerlink" title="px"></a>px</h1><p>px像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。</p>
<h2 id="PX特点"><a href="#PX特点" class="headerlink" title="PX特点"></a>PX特点</h2><ol>
<li>IE无法调整那些使用px作为单位的字体大小；</li>
<li>国外的大部分网站能够调整的原因在于其使用了em或rem作为字体单位；</li>
<li>Firefox能够调整px和em，rem，但是96%以上的中国网民使用IE浏览器(或内核)。</li>
</ol>
<h1 id="em"><a href="#em" class="headerlink" title="em"></a>em</h1><p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。</p>
<h2 id="em特点"><a href="#em特点" class="headerlink" title="em特点"></a>em特点</h2><ol>
<li>em的值并不是固定的；</li>
<li>em会继承父级元素的字体大小。</li>
</ol>
<blockquote>
<p>注意：任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。<br>所以我们在写CSS的时候，需要注意两点：</p>
<ol>
<li>body选择器中声明Font-size=62.5%；</li>
<li>将你的原来的px数值除以10，然后换上em作为单位；</li>
<li>重新计算那些被放大的字体的em数值。避免字体大小的重复声明。  </li>
</ol>
</blockquote>
<blockquote>
<p>也就是避免1.2 * 1.2= 1.44的现象。比如说你在#content中声明了字体大小为1.2em，那么在声明p的字体大小时就只能是   1em，而不是1.2em, 因为此em非彼em，它因继承#content的字体高而变为了1em=12px。</p>
</blockquote>
<h1 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h1><p>rem是CSS3新增的一个相对单位（root em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。下面就是一个例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-size</span>:<span class="number">14px</span>; <span class="attribute">font-size</span>:.<span class="number">875rem</span>;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong>： 选择使用什么字体单位主要由你的项目来决定，如果你的用户群都使用最新版的浏览器，那推荐使用rem，如果要考虑兼容性，那就使用px,或者两者同时使用。</p>
</blockquote>
<h2 id="px-与-rem-的选择？"><a href="#px-与-rem-的选择？" class="headerlink" title="px 与 rem 的选择？"></a>px 与 rem 的选择？</h2><p>对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可 。</p>
<p>对于需要适配各种移动设备，使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备。</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/28915418">参考资料</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>react生命周期（转载）</title>
    <url>/2019/04/18/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<blockquote>
<p>转载自： <a href="https://www.jianshu.com/p/514fe21b9914">详解React生命周期(包括react16版)</a></p>
</blockquote>
<blockquote>
<ul>
<li><a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">生命周期图谱</a><ul>
<li><a href="https://zh-hans.reactjs.org/docs/react-component.html">React 中文站-React.Component</a></li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="React-v16-0前的生命周期"><a href="#React-v16-0前的生命周期" class="headerlink" title="React v16.0前的生命周期"></a>React v16.0前的生命周期</h1><p>其实大部分团队不见得会跟进升到16版本，所以16前的生命周期还是很有必要掌握的，何况16也是基于之前的修改</p>
<p><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/20190418-3_articlex.png" alt="React v16.0-"></p>
<h2 id="第一个是组件初始化-initialization-阶段"><a href="#第一个是组件初始化-initialization-阶段" class="headerlink" title="第一个是组件初始化(initialization)阶段"></a>第一个是组件初始化(initialization)阶段</h2><p>也就是以下代码中类的构造方法( constructor() ),Test类继承了react Component这个基类，也就继承这个react的基类，才能有render(),生命周期等方法可以使用，这也说明为什么<code>函数组件不能使用这些方法</code>的原因。</p>
<p><code>super(props)</code>用来调用基类的构造方法( constructor() ), 也将父组件的props注入给子组件，供子组件读取(组件中props只读不可变，state可变)。<br>而<code>constructor()</code>用来做一些组件的初始化工作，如定义this.state的初始内容。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第二个是组件的挂载-Mounting-阶段"><a href="#第二个是组件的挂载-Mounting-阶段" class="headerlink" title="第二个是组件的挂载(Mounting)阶段"></a>第二个是组件的挂载(Mounting)阶段</h2><p><strong>此阶段分为componentWillMount，render，componentDidMount三个时期。</strong></p>
<ul>
<li>componentWillMount:</li>
</ul>
<p>在组件挂载到DOM前调用，且只会被调用一次，在这边调用this.setState不会引起组件重新渲染，也可以把写在这边的内容提前到constructor()中，所以项目中很少用。</p>
<ul>
<li>render:</li>
</ul>
<p>根据组件的props和state（无两者的重传递和重赋值，论值是否有变化，都可以引起组件重新render） ，return 一个React元素（描述组件，即UI），不负责组件实际渲染工作，之后由React自身根据此元素去渲染出页面DOM。render是纯函数（Pure function：函数的返回结果只依赖于它的参数；函数执行过程里面没有副作用），不能在里面执行this.setState，会有改变组件状态的副作用。</p>
<ul>
<li>componentDidMount:</li>
</ul>
<p>组件挂载到DOM后调用，且只会被调用一次</p>
<h2 id="第三个是组件的更新-update-阶段"><a href="#第三个是组件的更新-update-阶段" class="headerlink" title="第三个是组件的更新(update)阶段"></a>第三个是组件的更新(update)阶段</h2><p>在讲述此阶段前需要先明确下react组件更新机制。setState引起的state更新或父组件重新render引起的props更新，更新后的state和props相对之前无论是否有变化，都将引起子组件的重新render。详细可看<a href="https://www.cnblogs.com/penghuwan/p/6707254.html">这篇文章</a></p>
<h2 id="造成组件更新有两类（三种）情况："><a href="#造成组件更新有两类（三种）情况：" class="headerlink" title="造成组件更新有两类（三种）情况："></a>造成组件更新有两类（三种）情况：</h2><ul>
<li>1.父组件重新render</li>
</ul>
<p>父组件重新render引起子组件重新render的情况有两种，内容及代码修引自<a href="https://segmentfault.com/q/1010000006019858">xiaoyann的回答</a></p>
<p>a. 直接使用,每当父组件重新render导致的重传props，子组件将直接跟着重新渲染，无论props是否有变化。可通过shouldComponentUpdate方法优化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params">nextProps</span>)</span>&#123; <span class="comment">// 应该使用这个方法，否则无论props是否有变化都将会导致组件跟着重新渲染</span></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">nextProps.someThings === <span class="built_in">this</span>.props.someThings</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.someThings&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b.在componentWillReceiveProps方法中，将props转换成自己的state</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            someThings: props.someThings</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">componentWillReceiveProps</span>(<span class="params">nextProps</span>)</span> &#123; <span class="comment">// 父组件重传props时就会调用这个方法</span></span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">someThings</span>: nextProps.someThings&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.someThings&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据官网的描述</p>
<blockquote>
<p>在该函数(componentWillReceiveProps)中调用 this.setState() 将不会引起第二次渲染。</p>
</blockquote>
<p>是因为componentWillReceiveProps中判断props是否变化了，若变化了，this.setState将引起state变化，从而引起render，此时就没必要再做第二次因重传props引起的render了，不然重复做一样的渲染了。</p>
<ul>
<li>2.组件本身调用setState，无论state有没有变化。可通过shouldComponentUpdate方法优化</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">          someThings:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params">nextStates</span>)</span>&#123; <span class="comment">// 应该使用这个方法，否则无论state是否有变化都将会导致组件重新渲染</span></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">nextStates.someThings === <span class="built_in">this</span>.state.someThings</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   handleClick = <span class="function">() =&gt;</span> &#123; <span class="comment">// 虽然调用了setState ，但state并无变化</span></span><br><span class="line">        <span class="keyword">const</span> preSomeThings = <span class="built_in">this</span>.state.someThings</span><br><span class="line">         <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            someThings: preSomeThings</span><br><span class="line">         &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span> = <span class="string">&#123;this.handleClick&#125;</span>&gt;</span>&#123;this.state.someThings&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>此阶段分为componentWillReceiveProps，shouldComponentUpdate，componentWillUpdate，render，componentDidUpdate</strong></p>
<ul>
<li>componentWillReceiveProps(nextProps)</li>
</ul>
<p>此方法只调用于props引起的组件更新过程中，参数nextProps是父组件传给当前组件的新props。但父组件render方法的调用不能保证重传给当前组件的props是有变化的，所以在此方法中根据nextProps和this.props来查明重传的props是否改变，以及如果改变了要执行啥，比如根据新的props调用this.setState出发当前组件的重新render</p>
<ul>
<li>shouldComponentUpdate(nextProps, nextState)</li>
</ul>
<p>此方法通过比较nextProps，nextState及当前组件的this.props，this.state，返回true时当前组件将继续执行更新过程，返回false则当前组件更新停止，以此可用来减少组件的不必要渲染，优化组件性能。</p>
<p>ps：这边也可以看出，就算componentWillReceiveProps()中执行了this.setState，更新了state，但在render前（如shouldComponentUpdate，componentWillUpdate），this.state依然指向更新前的state，不然nextState及当前组件的this.state的对比就一直是true了。</p>
<ul>
<li>componentWillUpdate(nextProps, nextState)</li>
</ul>
<p>此方法在调用render方法前执行，在这边可执行一些组件更新发生前的工作，一般较少用。</p>
<ul>
<li>render</li>
</ul>
<p>render方法在上文讲过，这边只是重新调用。</p>
<ul>
<li>componentDidUpdate(prevProps, prevState)</li>
</ul>
<p>此方法在组件更新后被调用，可以操作组件更新的DOM，prevProps和prevState这两个参数指的是组件更新前的props和state</p>
<h2 id="卸载阶段"><a href="#卸载阶段" class="headerlink" title="卸载阶段"></a>卸载阶段</h2><p>此阶段只有一个生命周期方法：componentWillUnmount</p>
<ul>
<li>componentWillUnmount</li>
</ul>
<p>此方法在组件被卸载前调用，可以在这里执行一些清理工作，比如清楚组件中使用的定时器，清楚componentDidMount中手动创建的DOM元素等，以避免引起内存泄漏。</p>
<h1 id="React-v16-4-的生命周期"><a href="#React-v16-4-的生命周期" class="headerlink" title="React v16.4 的生命周期"></a>React v16.4 的生命周期</h1><p><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/20190418-4_articlex.png" alt="React v16.4的生命周期"></p>
<h2 id="变更缘由"><a href="#变更缘由" class="headerlink" title="变更缘由"></a>变更缘由</h2><p>原来（React v16.0前）的生命周期在React v16推出的Fiber之后就不合适了，因为如果要开启async rendering，在render函数之前的所有函数，都有可能被执行多次。</p>
<p>原来（React v16.0前）的生命周期有哪些是在render前执行的呢？</p>
<ul>
<li>componentWillMount</li>
<li>componentWillReceiveProps</li>
<li>shouldComponentUpdate</li>
<li>componentWillUpdate</li>
</ul>
<p>如果开发者开了async rendering，而且又在以上这些render前执行的生命周期方法做AJAX请求的话，那AJAX将被无谓地多次调用。。。明显不是我们期望的结果。而且在componentWillMount里发起AJAX，不管多快得到结果也赶不上首次render，而且componentWillMount在服务器端渲染也会被调用到（当然，也许这是预期的结果），这样的IO操作放在componentDidMount里更合适。</p>
<p>禁止不能用比劝导开发者不要这样用的效果更好，所以除了shouldComponentUpdate，其他在render函数之前的所有函数（componentWillMount，componentWillReceiveProps，componentWillUpdate）都被getDerivedStateFromProps替代。</p>
<p>也就是用一个静态函数getDerivedStateFromProps来取代被deprecate的几个生命周期函数，就是强制开发者在render之前只做无副作用的操作，而且能做的操作局限在根据props和state决定新的state</p>
<p>React v16.0刚推出的时候，是增加了一个componentDidCatch生命周期函数，这只是一个增量式修改，完全不影响原有生命周期函数；但是，到了React v16.3，大改动来了，引入了两个新的生命周期函数。</p>
<h2 id="新引入了两个新的生命周期函数"><a href="#新引入了两个新的生命周期函数" class="headerlink" title="新引入了两个新的生命周期函数"></a>新引入了两个新的生命周期函数</h2><blockquote>
<p><code>getDerivedStateFromProps</code>，<code>getSnapshotBeforeUpdate</code></p>
</blockquote>
<h3 id="getDerivedStateFromProps"><a href="#getDerivedStateFromProps" class="headerlink" title="getDerivedStateFromProps"></a>getDerivedStateFromProps</h3><p><code>getDerivedStateFromProps</code>本来（React v16.3中）是只在创建和更新（由父组件引发部分），也就是不是不由父组件引发，那么getDerivedStateFromProps也不会被调用，如自身setState引发或者forceUpdate引发。</p>
<p><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/20190418-5_articlex.png" alt="React v16.3的生命周期"></p>
<p>这样的话理解起来有点乱，在React v16.4中改正了这一点，让getDerivedStateFromProps无论是Mounting还是Updating，也无论是因为什么引起的Updating，全部都会被调用，具体可看React v16.4 的生命周期图。</p>
<blockquote>
<p>React v16.4后的getDerivedStateFromProps</p>
</blockquote>
<p><strong><em>static getDerivedStateFromProps(props, state)</em></strong> 在组件创建时和更新时的render方法之前调用，它应该返回一个对象来更新状态，或者返回null来不更新任何内容。</p>
<h3 id="getSnapshotBeforeUpdate"><a href="#getSnapshotBeforeUpdate" class="headerlink" title="getSnapshotBeforeUpdate"></a>getSnapshotBeforeUpdate</h3><p><strong><em>getSnapshotBeforeUpdate()</em></strong> 被调用于render之后，可以读取但无法使用DOM的时候。它使您的组件可以在可能更改之前从DOM捕获一些信息（例如滚动位置）。此生命周期返回的任何值都将作为参数传递给componentDidUpdate（）。</p>
<p>官网给的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollingList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.listRef = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getSnapshotBeforeUpdate</span>(<span class="params">prevProps, prevState</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//我们是否要添加新的 items 到列表?</span></span><br><span class="line">    <span class="comment">// 捕捉滚动位置，以便我们可以稍后调整滚动.</span></span><br><span class="line">    <span class="keyword">if</span> (prevProps.list.length &lt; <span class="built_in">this</span>.props.list.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> list = <span class="built_in">this</span>.listRef.current;</span><br><span class="line">      <span class="keyword">return</span> list.scrollHeight - list.scrollTop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps, prevState, snapshot</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//如果我们有snapshot值, 我们已经添加了 新的items.</span></span><br><span class="line">    <span class="comment">// 调整滚动以至于这些新的items 不会将旧items推出视图。</span></span><br><span class="line">    <span class="comment">// (这边的snapshot是 getSnapshotBeforeUpdate方法的返回值)</span></span><br><span class="line">    <span class="keyword">if</span> (snapshot !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> list = <span class="built_in">this</span>.listRef.current;</span><br><span class="line">      list.scrollTop = list.scrollHeight - snapshot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div ref=&#123;<span class="built_in">this</span>.listRef&#125;&gt;&#123;<span class="comment">/* ...contents... */</span>&#125;&lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考鸣谢 <a href="https://zhuanlan.zhihu.com/p/38030418">程墨Morgan老师的React v16.3之后的组件生命周期函数</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>一些感触</title>
    <url>/2019/04/14/%E4%B8%80%E4%BA%9B%E6%84%9F%E8%A7%A6/</url>
    <content><![CDATA[<p>从毕业到现在，工作也快1年半了，这一年来变化真是很大。当初大四最后一学期的补Java基础，看框架视频，做了半本书的笔记，现在也不知道在哪了；从找实习，找工作时的迷茫到现在的可以独立开发一些小项目，从无到有，更让自己觉得要学的东西太多，也在后悔大学没有好好努力，没有早点认识到方向的重要性。</p>
<p>去年的3月份，带着妹妹和好友Y去长沙旅游，Y君从山东飞到长沙，我们坐高铁到火车站，当时天色已晚，我们从火车站坐的士去机场接机。司机师傅是当地人，车程大约一个小时左右，我用我蹩脚的武汉话和司机师傅拉起家常。当时说的琐事已经记不清了，只记得他说:人在年轻的时候最容易迷茫，不知道自己到底要做什么，好多人都是在迷迷茫茫中，青春就过去了。做着自己不喜欢的事，到头来竹篮打水。最好做好计划，但是必须要长远，五年也行，十年也行。可以做一年的的计划，但是这些事情都必须很具体。下车时，他聊得投机，看我们也是学生，要少收一点，我还是按原价给了他。之后妹妹说起在的士上的事情，只说我在连连点头，满口嗯嗯。我是很赞同他说的话，除开我是一个很没有安全感的人以外，我这个人对未来也没有太多的想法，回想从前，每个时期都会觉得之前的日子完全是浪费。学校的生涯，初中、高中、大学，到现在，每一步都是随性走过来的。大多数时间竟然都是在焦虑中度过，如果懂的再多一点，面对事情的时候就会更有把握一点。可惜，时间只能一直向前走。</p>
<p>这世界上唯一不变的事情就是永远在变。事情是如此，人与人也是如此，期望没有经过付出的回报是毫无意义的。人与人之间的关系总是很微妙，好友和亲人有时可以混为一谈，更多的时候，家人，是唯一不向你索取却一直给予的人。人总是能从别人的身上学到东西。见人说人话，见鬼说鬼话；这是上辈语重心长说出来的，虽然当时他已经喝醉了，不过半辈子人生和社会经验融成的这句话，确实也让我感觉到一点其中的深意。我不喜欢一直抓着一个东西不放，如果一直耿耿于怀，心理生理上都会感觉憋屈，那些走过的坑，踩过的泥潭，都值得感谢，感谢让我体会到了这种感觉，不会再来一次的感觉。去年给自己定了一个备忘录，时间是一年后，内容是: 你有一番作为了吗？现在看来，和自己的想法差距甚大，反观现在，依然是随性，不过焦虑少了一些，改变是有的，不过前路漫漫。计划还是没有完成，一年前我会想到现在是怎么样吗？我现在又能想到一年后会是怎样吗？五年呢，十年呢？没有想法，只能从具体的事情开始做起。短期计划尚不能保证完全如意，何况长远，只能慢慢靠近。</p>
<p>希望一直开心下去，每个月读一本工具书，一本著作；坚持学英语，主要是记单词；坚持锻炼身体，可以跑步，可以散步，也可以仰卧起坐，俯卧撑，什么都行，但是要坚持；把想学的技术栈都弄懂，这样可以少问一点，少迷茫一点，懂得越多，越要精通一门或多门，可以学感兴趣的，爬虫、大数据；算法和数据结构是很重要的东西，设计模式，存储过程等等；爱好，还有什么呢，口琴很久没有碰过了，慢慢捡起来吧；自制力是现在最欠缺的东西，不过好像渐渐开始变好了，是因为对别的事情没有兴趣了？不知道是好事还是坏事。希望可以一直做自己喜欢的事情，希望变成更好的人，希望未来的事情都会变得简单，希望可以有属于自己的一块地方，希望。</p>
]]></content>
      <tags>
        <tag>闲聊</tag>
      </tags>
  </entry>
  <entry>
    <title>中级脚本算法</title>
    <url>/2019/02/25/%E4%B8%AD%E7%BA%A7%E8%84%9A%E6%9C%AC%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="中级脚本算法"><a href="#中级脚本算法" class="headerlink" title="中级脚本算法"></a>中级脚本算法</h1><h2 id="1-区间求值算法挑战"><a href="#1-区间求值算法挑战" class="headerlink" title="1. 区间求值算法挑战"></a>1. 区间求值算法挑战</h2><p>我们会传递给你一个包含两个数字的数组。返回这两个数字和它们之间所有数字的和。</p>
<p>最小的数字并非总在最前面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumAll</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num1 = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> num2 = arr[<span class="number">1</span>];</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">num1&gt;num2</span>)</span>&#123;</span><br><span class="line">        snum = num1-num2;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      snum = num2-num1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (num1+num2)*(snum+<span class="number">1</span>)/<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">sumAll([<span class="number">1</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumAll</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min(arr[<span class="number">0</span>],arr[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max(arr[<span class="number">0</span>],arr[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=max-min;i++</span>)</span>&#123;</span><br><span class="line">newArr[i] = min+i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newArr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a+b;&#125;);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">sumAll([<span class="number">1</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>脚本算法</tag>
      </tags>
  </entry>
  <entry>
    <title>关于junit发现的jar包问题</title>
    <url>/2019/02/13/%E5%85%B3%E4%BA%8Ejunit%E5%8F%91%E7%8E%B0%E7%9A%84jar%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="关于junit发现的jar包问题"><a href="#关于junit发现的jar包问题" class="headerlink" title="关于junit发现的jar包问题"></a>关于junit发现的jar包问题</h1><p>首先需要引入junit的jar包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test; </span><br></pre></td></tr></table></figure>
<p>然后在需要进行单元测试的方法上加上注解 <strong><code>@Test</code></strong></p>
<p>但是在Run junit的时候，却报了以下异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing</span><br><span class="line">    at java.lang.ClassLoader.defineClass1(Native Method)</span><br><span class="line">    at java.lang.ClassLoader.defineClass(ClassLoader.java:<span class="number">621</span>)</span><br><span class="line">    at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:<span class="number">124</span>)</span><br><span class="line">    at java.net.URLClassLoader.defineClass(URLClassLoader.java:<span class="number">260</span>)</span><br><span class="line">    at java.net.URLClassLoader.access$<span class="number">000</span>(URLClassLoader.java:<span class="number">56</span>)</span><br><span class="line">    at java.net.URLClassLoader$<span class="number">1.</span>run(URLClassLoader.java:<span class="number">195</span>)</span><br><span class="line">    at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">    at java.net.URLClassLoader.findClass(URLClassLoader.java:<span class="number">188</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">307</span>)</span><br><span class="line">    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:<span class="number">301</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">252</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:<span class="number">320</span>)</span><br><span class="line">    at java.lang.Class.getDeclaredConstructors0(Native Method)</span><br><span class="line">    at java.lang.Class.privateGetDeclaredConstructors(Class.java:<span class="number">2389</span>)</span><br><span class="line">    at java.lang.Class.getConstructor0(Class.java:<span class="number">2699</span>)</span><br><span class="line">    at java.lang.Class.getConstructor(Class.java:<span class="number">1657</span>)</span><br><span class="line">    at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:<span class="number">29</span>)</span><br><span class="line">    at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:<span class="number">21</span>)</span><br><span class="line">    at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:<span class="number">59</span>)</span><br><span class="line">    at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:<span class="number">26</span>)</span><br><span class="line">    at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:<span class="number">59</span>)</span><br><span class="line">    at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:<span class="number">26</span>)</span><br><span class="line">    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.&lt;init&gt;(JUnit4TestReference.java:<span class="number">33</span>)</span><br><span class="line">    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestClassReference.&lt;init&gt;(JUnit4TestClassReference.java:<span class="number">25</span>)</span><br><span class="line">    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createTest(JUnit4TestLoader.java:<span class="number">48</span>)</span><br><span class="line">    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.loadTests(JUnit4TestLoader.java:<span class="number">38</span>)</span><br><span class="line">    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:<span class="number">452</span>)</span><br><span class="line">    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:<span class="number">683</span>)</span><br><span class="line">    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:<span class="number">390</span>)</span><br><span class="line">    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:<span class="number">197</span>)</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.hamcrest.SelfDescribing</span><br><span class="line">    at java.net.URLClassLoader$<span class="number">1.</span>run(URLClassLoader.java:<span class="number">200</span>)</span><br><span class="line">    at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">    at java.net.URLClassLoader.findClass(URLClassLoader.java:<span class="number">188</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">307</span>)</span><br><span class="line">    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:<span class="number">301</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">252</span>)</span><br><span class="line">    at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:<span class="number">320</span>)</span><br></pre></td></tr></table></figure>
<p>搜索得知：是因为缺少了jar包</p>
<blockquote>
<ul>
<li>junit.jar: Includes the Hamcrest classes. The simple all-in-one solution to get started quickly.Starting with version 4.11, Hamcrest is no longer included in this jar.</li>
</ul>
</blockquote>
<ul>
<li>junit-dep.jar: Only includes the JUnit classes but not Hamcrest. Lets you use a different Hamcrest version.</li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用时导入包的方案：</p>
<ul>
<li>junit.jar + hamcrest-core.jar + hamcrest-library.jar</li>
<li>或者是：junit-dep.ajr+hancrest-all.jar</li>
</ul>
<p>原文：<a href="https://blog.csdn.net/castle07/article/details/8553704">https://blog.csdn.net/castle07/article/details/8553704</a> </p>
<p>jar包下载地址：<a href="http://www.java2s.com/Code/Jar/h/Catalogh.htm">http://www.java2s.com/Code/Jar/h/Catalogh.htm</a></p>
]]></content>
  </entry>
  <entry>
    <title>初步了解Normalize.css</title>
    <url>/2020/04/08/%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3Normalize-css/</url>
    <content><![CDATA[<h1 id="初步了解Normalize-css"><a href="#初步了解Normalize-css" class="headerlink" title="初步了解Normalize.css"></a>初步了解Normalize.css</h1><blockquote>
<p><a href="https://jerryzou.com/posts/aboutNormalizeCss/">译文链接</a><br><a href="http://nicolasgallagher.com/about-normalize-css/">原文链接</a></p>
</blockquote>
<p><a href="http://necolas.github.io/normalize.css/">Normalize.css</a> 只是一个很小的CSS文件，但它在默认的HTML元素样式上提供了跨浏览器的高度一致性。相比于传统的<em>CSS reset</em>，<em>Normalize.css</em>是一种现代的、为HTML5准备的优质替代方案。<em>Normalize.css</em>现在已经被用于<a href="http://getbootstrap.com/">Twitter Bootstrap</a>、<a href="http://html5boilerplate.com/">HTML5 Boilerplate</a>、<a href="http://www.gov.uk/">GOV.UK</a>、<a href="http://www.rdio.com/">Rdio</a>、<a href="http://css-tricks.com/">CSS Tricks</a> 以及许许多多其他框架、工具和网站上。</p>
<ul>
<li><a href="http://necolas.github.io/normalize.css/">Normalize.css 项目地址</a></li>
<li><a href="https://github.com/necolas/normalize.css">Normalize.css 在GitHub上的源码</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p><em>Normalize.css</em>是一种<em>CSS reset</em>的替代方案。经过<a href="https://twitter.com/necolas">@necolas</a>和<a href="https://twitter.com/jon_neal">@jon_neal</a>花了几百个小时来努力研究不同浏览器的默认样式的差异，这个项目终于变成了现在这样。</p>
<p>我们创造<em>normalize.css</em>有下面这几个目的：</p>
<ul>
<li><strong>保护有用的浏览器默认样式</strong>而不是完全去掉它们</li>
<li><strong>一般化的样式</strong>：为大部分HTML元素提供</li>
<li><strong>修复浏览器自身的bug</strong>并保证各浏览器的一致性</li>
<li><strong>优化CSS可用性</strong>：用一些小技巧</li>
<li><strong>解释代码</strong>：用注释和详细的文档来</li>
</ul>
<p><em>Normalize.css</em>支持包括手机浏览器在内的超多浏览器，同时对HTML5元素、排版、列表、嵌入的内容、表单和表格都进行了一般化。尽管这个项目基于一般化的原则，但我们还是在合适的地方使用了更实用的默认值。</p>
<h1 id="Normalize-vs-Reset"><a href="#Normalize-vs-Reset" class="headerlink" title="Normalize vs Reset"></a>Normalize vs Reset</h1><p>知道<em>Normalize.css</em>和传统<em>Reset</em>的区别是非常有价值的。</p>
<h2 id="1-Normalize-css-保护了有价值的默认值"><a href="#1-Normalize-css-保护了有价值的默认值" class="headerlink" title="1. Normalize.css 保护了有价值的默认值"></a>1. Normalize.css 保护了有价值的默认值</h2><p><em>Reset</em>通过为几乎所有的元素施加默认样式，强行使得元素有相同的视觉效果。相比之下，<em>Normalize.css</em>保持了许多默认的浏览器样式。这就意味着你不用再为所有公共的排版元素重新设置样式。当一个元素在不同的浏览器中有不同的默认值时，<em>Normalize.css</em>会力求让这些样式保持一致并尽可能与现代标准相符合。</p>
<h2 id="2-Normalize-css-修复了浏览器的bug"><a href="#2-Normalize-css-修复了浏览器的bug" class="headerlink" title="2. Normalize.css 修复了浏览器的bug"></a>2. Normalize.css 修复了浏览器的bug</h2><p>它修复了常见的桌面端和移动端浏览器的bug。这往往超出了<em>Reset</em>所能做到的范畴。关于这一点，<em>Normalize.css</em>修复的问题包含了HTML5元素的显示设置、预格式化文字的<em>font-size</em>问题、在IE9中SVG的溢出、许多出现在各浏览器和操作系统中的与表单相关的bug。</p>
<p>可以看以下这个例子，看看对于HTML5中新出现的<em>input</em>类型<em>search</em>，<em>Normalize.css</em>是如何保证跨浏览器的一致性的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. Addresses appearance set to searchfield in S5, Chrome</span></span><br><span class="line"><span class="comment"> * 2. Addresses box-sizing set to border-box in S5, Chrome (include -moz to future-proof)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;search&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: textfield; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">-moz-box-sizing</span>: content-box;</span><br><span class="line">  <span class="attribute">-webkit-box-sizing</span>: content-box; <span class="comment">/* 2 */</span></span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes inner padding and search cancel button in S5, Chrome on OS X</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;search&quot;</span>]</span><span class="selector-pseudo">::-webkit-search-decoration</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;search&quot;</span>]</span><span class="selector-pseudo">::-webkit-search-cancel-button</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-Normalize-css-不会让你的调试工具变的杂乱"><a href="#3-Normalize-css-不会让你的调试工具变的杂乱" class="headerlink" title="3. Normalize.css 不会让你的调试工具变的杂乱"></a>3. Normalize.css 不会让你的调试工具变的杂乱</h2><p>使用Reset最让人困扰的地方莫过于在浏览器调试工具中大段大段的继承链，如下图所示。在<em>Normalize.css</em>中就不会有这样的问题，因为在我们的准则中对多选择器的使用时非常谨慎的，我们仅会有目的地对目标元素设置样式。<br><img src="https://github.com/XTZhu/image/raw/master/blog/css-reset-debugging.png" alt="A common sight in browser debugging tools when using a CSS reset"></p>
<h2 id="4-Normalize-css-是模块化的"><a href="#4-Normalize-css-是模块化的" class="headerlink" title="4. Normalize.css 是模块化的"></a>4. Normalize.css 是模块化的</h2><p>这个项目已经被拆分为多个相关却又独立的部分，这使得你能够很容易也很清楚地知道哪些元素被设置了特定的值。因此这能让你自己选择性地移除掉某些永远不会用到部分（比如表单的一般化）。</p>
<h2 id="5-Normalize-css-拥有详细的文档"><a href="#5-Normalize-css-拥有详细的文档" class="headerlink" title="5. Normalize.css 拥有详细的文档"></a>5. Normalize.css 拥有详细的文档</h2><p>Normalize.css的代码基于详细而全面的跨浏览器研究与测试。这个文件中拥有详细的代码说明并在<a href="https://github.com/necolas/normalize.css/wiki">Github Wiki</a>中有进一步的说明。这意味着你可以找到每一行代码具体完成了什么工作、为什么要写这句代码、浏览器之间的差异，并且你可以更容易地进行自己的测试。</p>
<p>这个项目的目标是帮助人们了解浏览器默认是如何渲染元素的，同时也让人们很容易地明白如何改进浏览器渲染。</p>
<h1 id="如何使用-normalize-css"><a href="#如何使用-normalize-css" class="headerlink" title="如何使用 normalize.css"></a>如何使用 normalize.css</h1><p>首先，安装或从Github<a href="http://necolas.github.com/normalize.css/">下载Normalize.css</a>，接下来有两种主要途径去使用它。</p>
<ul>
<li>策略一：将<em>normalize.css</em>作为你自己项目的基础CSS，自定义样式值以满足设计师的需求。</li>
<li>策略二：引入<em>normalize.css</em>源码并在此基础上构建，在必要的时候用你自己写的CSS覆盖默认值。</li>
</ul>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>无论从适用范畴还是实施上，<em>Normalize.css</em>与<em>Reset</em>都有极大的不同。尝试一下这两种方法并看看到底哪种更适合你的开发偏好是非常值得的。这个项目在Github上以开源的形式开发。任何人都能够提交问题报告或者提交补丁。整个项目发展的过程对所有人都是可见的，而每一次改动的原因也都写在commit信息中，这些都是有迹可循的。</p>
<h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><p>关于更多默认UA样式的详细信息：</p>
<ul>
<li><a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/rendering.html#the-css-user-agent-style-sheet-and-presentational-hints">WHATWG suggestions for rendering HTML documents</a></li>
<li><a href="http://iecss.com/">Internet Explorer User Agent Style Sheets</a></li>
<li><a href="http://css-class.com/test/css/defaults/UA-style-sheet-defaults.htm">CSS2.1 User Agent Style Sheet Defaults</a></li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>初级脚本算法-2</title>
    <url>/2019/02/20/%E5%88%9D%E7%BA%A7%E8%84%9A%E6%9C%AC%E7%AE%97%E6%B3%95-2/</url>
    <content><![CDATA[<h1 id="初级脚本算法-2"><a href="#初级脚本算法-2" class="headerlink" title="初级脚本算法-2"></a>初级脚本算法-2</h1><h2 id="5-设置首字母大写算法挑战"><a href="#5-设置首字母大写算法挑战" class="headerlink" title="5. 设置首字母大写算法挑战"></a>5. 设置首字母大写算法挑战</h2><p>返回一个字符串,确保字符串的每个单词首字母都大写，其余部分小写。</p>
<p>像’the’和’of’这样的连接符同理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = str.toLowerCase().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="function"><span class="title">for</span>(<span class="params">i=<span class="number">0</span>;i&lt;arr.length;i++</span>)</span>&#123;</span><br><span class="line">    arr[i] = arr[i][<span class="number">0</span>].toUpperCase() + arr[i].substring(<span class="number">1</span>,arr[i].length);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr.join(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">titleCase(<span class="string">&quot;I&#x27;m a little tea pot&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-寻找数组中的最大值算法挑战"><a href="#6-寻找数组中的最大值算法挑战" class="headerlink" title="6. 寻找数组中的最大值算法挑战"></a>6. 寻找数组中的最大值算法挑战</h2><p>  在右边的大数组中包含了4个小数组，请分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新的数组。</p>
<blockquote>
<p>提示：你可以用for循环来迭代数组，并通过arr[i]的方式来访问数组的每个元素。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">largestOfFour</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="comment">// You can do this!</span></span><br><span class="line"><span class="keyword">var</span> maxArr = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i++</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> j = <span class="number">0</span>;j &lt; arr[i].length;j++</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">j === <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">      maxArr[i] = arr[i][j];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      maxArr[i] = arr[i][j] &gt; maxArr[i]?arr[i][j]:maxArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">largestOfFour([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>], [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>], [<span class="number">1000</span>, <span class="number">1001</span>, <span class="number">857</span>, <span class="number">1</span>]]);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="7-确认末尾字符算法挑战"><a href="#7-确认末尾字符算法挑战" class="headerlink" title="7.确认末尾字符算法挑战"></a>7.确认末尾字符算法挑战</h2><p>检查一个字符串(str)是否以指定的字符串(target)结尾.</p>
<p>如果是，返回true;如果不是，返回false。</p>
<p>这个挑战可以通过在ES2015中引入的<code>.endsWith()</code>方法来解决。但是出于这个挑战的目的，我们希望您使用JavaScript子串方法之一。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">confirmEnding</span>(<span class="params">str, target</span>) </span>&#123;</span><br><span class="line"><span class="comment">// &quot;Never give up and good luck will find you.&quot;</span></span><br><span class="line"><span class="comment">// -- Falcor</span></span><br><span class="line"><span class="keyword">var</span> substr = str.substr(-target.length);</span><br><span class="line"><span class="comment">// return str.endsWith(target);</span></span><br><span class="line"><span class="keyword">return</span> target === substr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">confirmEnding(<span class="string">&quot;Bastian&quot;</span>, <span class="string">&quot;n&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="8-重复操作算法挑战"><a href="#8-重复操作算法挑战" class="headerlink" title="8.重复操作算法挑战"></a>8.重复操作算法挑战</h2><p>循环拼接一个指定的字符串 num次，如果num是一个负数,则返回一个空字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str, num</span>) </span>&#123;</span><br><span class="line"><span class="comment">// repeat after me</span></span><br><span class="line"><span class="keyword">var</span> substr=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">num=&gt;<span class="number">0</span></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">for</span>(<span class="params">i=<span class="number">0</span>;i&lt;num; i++</span>)</span>&#123;</span><br><span class="line">    substr = substr+str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> substr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repeat(<span class="string">&quot;abc&quot;</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h2 id="9-字符串截取算法挑战"><a href="#9-字符串截取算法挑战" class="headerlink" title="9.字符串截取算法挑战"></a>9.字符串截取算法挑战</h2><p>如果字符串的长度比给定的参数num长，则把多余的部分用…来表示。</p>
<p>切记，插入到字符串尾部的三个点号也会计入字符串的长度。</p>
<p>然而，如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">str, num</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> newStr=<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">str.length&gt;num</span>)</span>&#123;</span><br><span class="line">      <span class="function"><span class="title">if</span>(<span class="params">num&lt;=<span class="number">3</span></span>)</span>&#123;</span><br><span class="line">          newStr = str.slice(<span class="number">0</span>,num)+<span class="string">&quot;...&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            newStr = str.slice(<span class="number">0</span>,num-<span class="number">3</span>)+<span class="string">&quot;...&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        newStr=str;</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="keyword">return</span> newStr;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">truncate(<span class="string">&quot;A-tisket a-tasket A green and yellow basket&quot;</span>, <span class="number">11</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>脚本算法</tag>
      </tags>
  </entry>
  <entry>
    <title>初级脚本算法-3</title>
    <url>/2019/02/25/%E5%88%9D%E7%BA%A7%E8%84%9A%E6%9C%AC%E7%AE%97%E6%B3%95-3/</url>
    <content><![CDATA[<h1 id="初级脚本算法-3"><a href="#初级脚本算法-3" class="headerlink" title="初级脚本算法-3"></a>初级脚本算法-3</h1><h2 id="10-数组分割算法挑战"><a href="#10-数组分割算法挑战" class="headerlink" title="10. 数组分割算法挑战"></a>10. 数组分割算法挑战</h2><p>编写一个函数,把一个数组<code>arr</code>按照指定的数组大小<code>size</code>分割成若干个数组块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">arr, size</span>) </span>&#123;</span><br><span class="line"><span class="comment">// Break it up.</span></span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i = i + size</span>)</span>&#123;</span><br><span class="line">    newArr.push(arr.slice(i,i+size));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line">chunk([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>], <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="11-数组截断算法挑战"><a href="#11-数组截断算法挑战" class="headerlink" title="11. 数组截断算法挑战"></a>11. 数组截断算法挑战</h2><p> 返回一个数组被截断<code>n</code>个元素后还剩余的元素，从索引0开始截断。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">slasher</span>(<span class="params">arr, howMany</span>) </span>&#123;</span><br><span class="line"><span class="comment">// it doesn&#x27;t always pay to be first</span></span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">arr.length&lt;=howMany</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.slice(howMany)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">slasher([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h2 id="12-数组查询算法挑战"><a href="#12-数组查询算法挑战" class="headerlink" title="12. 数组查询算法挑战"></a>12. 数组查询算法挑战</h2><p> 如果数组第一个字符串元素包含了第二个字符串元素的所有字符，则函数返回true。</p>
<p> 举例，<code>[&quot;hello&quot;, &quot;Hello&quot;]</code>应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。</p>
<p> <code>[&quot;hello&quot;, &quot;hey&quot;]</code>应该返回false，因为字符串”hello”并不包含字符”y”。</p>
<p> <code>[&quot;Alien&quot;, &quot;line&quot;]</code>应该返回true，因为”line”中所有字符都可以在”Alien”找到。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mutation</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">str1 = arr[<span class="number">0</span>].toLowerCase();</span><br><span class="line">str2 = arr[<span class="number">1</span>].toLowerCase();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str2.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str1.indexOf(str2[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mutation([<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hey&quot;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>获取字符串的某个字符有两种方法。 第一种是使用 charAt 方法：</p>
</blockquote>
<pre><code>return &apos;cat&apos;.charAt(1); // returns &quot;a&quot;</code></pre><blockquote>
<p>另一种 (在ECMAScript 5中有所介绍) 是把字符串当作一个类似数组的对象，其中的每个字符对应一个数值索引：</p>
</blockquote>
<pre><code>return &apos;cat&apos;[1]; // returns &quot;a&quot;  </code></pre><blockquote>
<p>使用括号访问字符串不可以对其进行删除或添加，因为字符串对应未知的属性并不是可读或配置的。</p>
</blockquote>
<h2 id="13-删除数组中特定值算法挑战"><a href="#13-删除数组中特定值算法挑战" class="headerlink" title="13.删除数组中特定值算法挑战"></a>13.删除数组中特定值算法挑战</h2><p>删除数组中的所有的假值。</p>
<p>在JavaScript中，假值有<code>false</code>、<code>null</code>、<code>0</code>、<code>&quot;&quot;</code>、<code>undefined</code> 和 <code>NaN</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bouncer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="comment">// Don&#x27;t show a false ID to this bouncer.</span></span><br><span class="line"><span class="keyword">const</span> result = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> !(!item || item === <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bouncer([<span class="number">7</span>, <span class="string">&quot;ate&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">false</span>, <span class="number">9</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="14-去除数组中任意多个值算法挑战"><a href="#14-去除数组中任意多个值算法挑战" class="headerlink" title="14.去除数组中任意多个值算法挑战"></a>14.去除数组中任意多个值算法挑战</h2><p>实现一个 destroyer 函数，第一个参数是初始数组，后跟一个或多个参数。从初始数组中删除与这些参数具有相同值的所有元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroyer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//arguments是保存当前函数所有的参数的类数组对象</span></span><br><span class="line">    <span class="keyword">var</span> argArr = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="comment">//遍历参数数组，与初始数组的每个元素进行比较，返回初始数组中不同的元素</span></span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i = <span class="number">1</span>; i &lt; argArr.length; i++</span>)</span>&#123;</span><br><span class="line">        arr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> argArr[i] !== val;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">destroyer([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h2 id="15-数组排序并插入值算法挑战"><a href="#15-数组排序并插入值算法挑战" class="headerlink" title="15.数组排序并插入值算法挑战"></a>15.数组排序并插入值算法挑战</h2><p>先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。</p>
<blockquote>
<p>举例：<code>where([1,2,3,4], 1.5)</code> 应该返回<code>1</code>。因为<code>1.5</code>插入到数组<code>[1,2,3,4]</code>后变成<code>[1,1.5,2,3,4]</code>，而<code>1.5</code>对应的索引值就是<code>1</code>。</p>
</blockquote>
<blockquote>
<p>同理，<code>where([20,3,5], 19)</code> 应该返回 <code>2</code>。因为数组会先排序为 <code>[3,5,20]</code>，19插入到数组<code>[3,5,20]</code>后变成<code>[3,5,19,20]</code>，而<code>19</code>对应的索引值就是<code>2</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">where</span>(<span class="params">arr, num</span>) </span>&#123;</span><br><span class="line"><span class="comment">// Find my place in this sorted array.</span></span><br><span class="line">arr.push(num);</span><br><span class="line">   arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> a-b;</span><br><span class="line">   &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr.indexOf(num);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">where([<span class="number">40</span>, <span class="number">60</span>], <span class="number">50</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>sort() 方法用于对数组的元素进行排序。</p>
</blockquote>
<pre><code>arrayObject.sort(sortby)</code></pre><blockquote>
<p><code>sortby</code>    可选。规定排序顺序。必须是函数。</p>
</blockquote>
<blockquote>
<p><strong>返回值</strong>  对数组的引用。请注意，数组在原数组上进行排序，不生成副本。</p>
</blockquote>
<p>如果调用该方法时没有使用参数，将按字母顺序对数组中的元素进行排序，说得更精确点，是按照字符编码的顺序进行排序。要实现这一点，首先应把数组的元素都转换成字符串（如有必要），以便进行比较。</p>
<p>如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：</p>
<ul>
<li>若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。</li>
<li>若 a 等于 b，则返回 0。</li>
<li>若 a 大于 b，则返回一个大于 0 的值。</li>
</ul>
<h2 id="16-位移密码算法挑战"><a href="#16-位移密码算法挑战" class="headerlink" title="16. 位移密码算法挑战"></a>16. 位移密码算法挑战</h2><p>下面我们来介绍著名的凯撒密码<code>Caesar cipher</code>，又叫移位密码。</p>
<p>移位密码也就是密码中的字母会按照指定的数量来做移位。</p>
<p>一个常见的案例就是ROT13密码，字母会移位13个位置。由’A’ ↔ ‘N’, ‘B’ ↔’O’，以此类推。</p>
<p>写一个ROT13函数，实现输入加密字符串，输出解密字符串。</p>
<p>所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，就跳过它们</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rot13</span>(<span class="params">str</span>) </span>&#123; <span class="comment">// LBH QVQ VG!</span></span><br><span class="line"><span class="keyword">var</span> patt1=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;[A-Z]&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params">i=<span class="number">0</span>;i&lt;arr.length;i++</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">patt1.test(arr[i])</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> temp = arr[i].charCodeAt();</span><br><span class="line">       temp = temp -<span class="number">13</span>;</span><br><span class="line">       <span class="function"><span class="title">if</span>(<span class="params">temp&lt;<span class="number">65</span></span>)</span>&#123;</span><br><span class="line">           temp = temp+<span class="number">26</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       arr[i] = <span class="built_in">String</span>.fromCharCode(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change the inputs below to test</span></span><br><span class="line">rot13(<span class="string">&quot;SERR PBQR PNZC&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rot13</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个数组，用来存放解密后的字符</span></span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="comment">//遍历参数字符串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 非字母形式的字符，直接跳过，存入数组newArr中</span></span><br><span class="line">        <span class="keyword">if</span> (str.charCodeAt(i) &lt; <span class="number">65</span> || str.charCodeAt(i) &gt; <span class="number">90</span>) &#123;</span><br><span class="line">            newArr.push(str.charAt(i));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.charCodeAt(i) &gt; <span class="number">77</span>) &#123;</span><br><span class="line">            <span class="comment">// 后13个大写字母，减去13</span></span><br><span class="line">            newArr.push(<span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) - <span class="number">13</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 前13个大写字母，加上13 </span></span><br><span class="line">            newArr.push(<span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) + <span class="number">13</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>脚本算法</tag>
      </tags>
  </entry>
  <entry>
    <title>初级脚本算法</title>
    <url>/2019/02/19/%E5%88%9D%E7%BA%A7%E8%84%9A%E6%9C%AC%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="初级脚本算法"><a href="#初级脚本算法" class="headerlink" title="初级脚本算法"></a>初级脚本算法</h1><h2 id="1-实战翻转字符串算法"><a href="#1-实战翻转字符串算法" class="headerlink" title="1. 实战翻转字符串算法"></a>1. 实战翻转字符串算法</h2><blockquote>
<p>你可以先把字符串转化成数组，再借助数组的<code>reverse</code>方法翻转数组顺序，然后把数组转化成字符串。</p>
</blockquote>
<blockquote>
<p>提示:你的结果必须得是一个字符串</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseString</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    str = str.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reverseString(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseString</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str&amp;&amp;reverseString(str.slice(<span class="number">1</span>)) + str[<span class="number">0</span>]; </span><br><span class="line">&#125;</span><br><span class="line">reverseString(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="2-阶乘算法挑战"><a href="#2-阶乘算法挑战" class="headerlink" title="2. 阶乘算法挑战"></a>2. 阶乘算法挑战</h2><p>计算所提供整数的阶乘。  </p>
<p>如果使用字母n代表一个整数，则阶乘是所有小于或等于n的整数的乘积。</p>
<blockquote>
<p>阶乘通常简写成 n!<br>例如: 5! = 1 * 2 * 3 * 4 * 5 = 120</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorialize</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num === <span class="number">0</span> || num === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = num - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            num *= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;;</span><br><span class="line">factorialize(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorialize</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num-<span class="number">1</span>)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-回文算法挑战"><a href="#3-回文算法挑战" class="headerlink" title="3.回文算法挑战"></a>3.回文算法挑战</h2><p>如果给定的字符串是回文，返回true，反之，返回false。</p>
<p>palindrome(回文)是指一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样。</p>
<blockquote>
<p><strong>注意:</strong> 您需要删除字符串多余的标点符号和空格，然后把字符串转化成小写来验证此字符串是不是回文。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">str</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> re = <span class="regexp">/[\W_]/g</span>; <span class="comment">// 或者 var re = /[^A-Za-z0-9]/g; </span></span><br><span class="line">    <span class="keyword">var</span> lowRegStr = str.toLowerCase().replace(re,<span class="string">&#x27;&#x27;</span>); </span><br><span class="line">    <span class="keyword">var</span> reverseStr = lowRegStr.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>); </span><br><span class="line">    <span class="keyword">return</span> reverseStr === lowRegStr; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> str.replace(<span class="regexp">/[\W_]/g</span>, <span class="string">&#x27;&#x27;</span>).toLowerCase() === </span><br><span class="line">        str.replace(<span class="regexp">/[\W_]/g</span>, <span class="string">&#x27;&#x27;</span>).toLowerCase().split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>); </span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://www.w3cplus.com/javascript/palindrome-check-in-javascript.html">参考原帖地址</a></p>
</blockquote>
<h2 id="4-寻找最长的单词算法挑战"><a href="#4-寻找最长的单词算法挑战" class="headerlink" title="4.寻找最长的单词算法挑战"></a>4.寻找最长的单词算法挑战</h2><p>返回提供的句子中最长的单词的长度。</p>
<p>返回值应该是一个数字。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLongestWord</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">var</span> maxLength = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i =<span class="number">0</span>;i&lt;arr.length;i++</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">arr[i].length &gt; maxLength</span>)</span>&#123;</span><br><span class="line">         maxLength = arr[i].length;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findLongestWord(<span class="string">&quot;The quick brown fox jumped over the lazy dog&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>脚本算法</tag>
      </tags>
  </entry>
  <entry>
    <title>利用momentJS获取当天凌晨的时间戳</title>
    <url>/2019/12/09/%E5%88%A9%E7%94%A8momentJS%E8%8E%B7%E5%8F%96%E5%BD%93%E5%A4%A9%E5%87%8C%E6%99%A8%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> now = moment().format(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> zero = moment(now).format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> today = moment(zero).toDate().getTime();</span><br><span class="line"><span class="keyword">let</span> yesterday = moment(today).subtract(<span class="number">1</span>, <span class="string">&#x27;days&#x27;</span>).format(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://codesandbox.io/s/objective-sound-tfcm9">在线实例</a></p>
]]></content>
      <tags>
        <tag>momentJS</tag>
      </tags>
  </entry>
  <entry>
    <title>在浏览器中输入url后发生了什么?</title>
    <url>/2019/05/09/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5url%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<blockquote>
<p>参考资料：<a href="https://www.jianshu.com/p/c1dfc6caa520">https://www.jianshu.com/p/c1dfc6caa520</a><br>推荐阅读：<a href="https://www.zhihu.com/question/34873227">https://www.zhihu.com/question/34873227</a><br>深度阅读：<a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/">https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/</a><br><a href="https://kb.cnblogs.com/page/129756/">https://kb.cnblogs.com/page/129756/</a><br><a href="https://coolshell.cn/articles/9666.html">https://coolshell.cn/articles/9666.html</a><br><a href="https://www.cnblogs.com/tisikcci/p/5866753.html">https://www.cnblogs.com/tisikcci/p/5866753.html</a><br><a href="https://blog.csdn.net/xifeijian/article/details/10813339">https://blog.csdn.net/xifeijian/article/details/10813339</a><br>非常详细： <a href="http://blog.jobbole.com/84870/">http://blog.jobbole.com/84870/</a></p>
</blockquote>
<h1 id="what-happend？"><a href="#what-happend？" class="headerlink" title="what happend？"></a>what happend？</h1><p>上脑图！<br><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/2075673-3afda32a13a68c6b.png" alt="lei了lei了"></p>
<h2 id="解析URL"><a href="#解析URL" class="headerlink" title="解析URL"></a>解析URL</h2><p>关于URL：<br><code>URL（Universal Resource Locator）</code>：统一资源定位符。俗称网页地址或者网址。<br>URL用来表示某个资源的地址。（通过俗称就能看出来）<br>URL主要由以下几个部分组成：</p>
<ul>
<li>传输协议</li>
<li>服务器</li>
<li>域名</li>
<li>端口</li>
<li>虚拟目录</li>
<li>文件名</li>
<li>锚</li>
<li>参数</li>
</ul>
<p>也就是说，通常一个URL是像下面这样<br><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/fuoSKIi4fj.png" alt="URL"></p>
<p>连起来就是：<code>http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</code></p>
<blockquote>
<p>上面的链接有几个要注意的地方：<code>;</code> 和<code>/</code>的使用，<code>80</code>端口默认不显示，<code>?</code> 到<code>#</code>之间跟着参数，多个参数使用<code>&amp;</code>连接，<code>#</code>后面跟着锚。 </p>
</blockquote>
<hr>
<p>现在来讨论URL解析，当在浏览器中输入URL后，浏览器首先对拿到的URL进行识别，抽取出域名字段。</p>
<h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><p><strong>DNS解析（域名解析）</strong>，DNS实际上是一个域名和IP对应的数据库。</p>
<p>IP地址往都难以记住，但机器间互相只认IP地址，于是人们发明了域名，让域名与IP地址之间一一对应，它们之间的转换工作称为<code>域名解析</code>，域名解析需要由专门的域名解析服务器来完成，整个过程是自动进行的。</p>
<p>可以在浏览器中输入IP地址浏览网站，也可以输入域名查询网站，虽然得出的内容是一样的但是调用的过程不一样，输入IP地址是直接从主机上调用内容，输入域名是通过域名解析服务器指向对应的主机的IP地址，再从主机调用网站的内容。</p>
<p>在进行DNS解析时，会经历以下步骤：</p>
<ul>
<li><p><strong>查询浏览器缓存</strong>（浏览器会缓存之前拿到的DNS 2-30分钟时间），如果没有找到，</p>
</li>
<li><p><strong>检查系统缓存</strong>，检查hosts文件，这个文件保存了一些以前访问过的网站的域名和IP的数据。它就像是一个本地的数据库。如果找到就可以直接获取目标主机的IP地址了。没有找到的话，需要</p>
</li>
<li><p><strong>检查路由器缓存</strong>，路由器有自己的DNS缓存，可能就包括了这在查询的内容；如果没有，要</p>
</li>
<li><p><strong>查询ISP DNS 缓存</strong>：ISP服务商DNS缓存（本地服务器缓存）那里可能有相关的内容，如果还不行的话，需要，</p>
</li>
<li><p><strong>递归查询</strong>：从根域名服务器到顶级域名服务器再到极限域名服务器依次搜索对应目标域名的IP。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/9383-1210799666.png" alt="URL"><br>通过以上的查找，就可以获取到域名对应的IP了。接下来就是向该IP地址定位的HTTP服务器发起TCP连接。</p>
<hr>
<h2 id="浏览器与网站建立TCP连接（三次握手）"><a href="#浏览器与网站建立TCP连接（三次握手）" class="headerlink" title="浏览器与网站建立TCP连接（三次握手）"></a>浏览器与网站建立TCP连接（三次握手）</h2><blockquote>
<p><a href="https://xtzhu.github.io/2019/04/08/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/#%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B">参考</a></p>
</blockquote>
<h2 id="请求和传输数据"><a href="#请求和传输数据" class="headerlink" title="请求和传输数据"></a>请求和传输数据</h2><p>发起HTTP请求，请求方法：</p>
<ul>
<li>GET: 获取资源</li>
<li>POST: 传输实体主体</li>
<li>HEAD: 获取报文首部</li>
<li>PUT: 传输文件</li>
<li>DELETE: 删除文件</li>
<li>OPTIONS: 询问支持的方法</li>
<li>TRACE: 追踪路径</li>
</ul>
<p>请求报文：<br><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/2075673-1f2c0829b7a86c6d.png" alt="请求报文"></p>
<h2 id="接受响应结果"><a href="#接受响应结果" class="headerlink" title="接受响应结果"></a>接受响应结果</h2><p>状态码：</p>
<ul>
<li><p>1**：信息性状态码</p>
</li>
<li><p>2**：成功状态码</p>
<pre><code>200：OK 请求正常处理  
204：No Content请求处理成功，但没有资源可返回  
206：Partial Content对资源的某一部分的请求</code></pre></li>
<li><p>3**：重定向状态码</p>
<pre><code>301：Moved Permanently 永久重定向  
302：Found 临时性重定向  
304：Not Modified 缓存中读取  </code></pre></li>
<li><p>4**：客户端错误状态码</p>
<pre><code>400：Bad Request 请求报文中存在语法错误  
401：Unauthorized需要有通过Http认证的认证信息  
403：Forbidden访问被拒绝  
404：Not Found无法找到请求资源  </code></pre></li>
<li><p>5**：服务器错误状态码</p>
<pre><code>500：Internal Server Error 服务器端在执行时发生错误  
503：Service Unavailable 服务器处于超负载或者正在进行停机维护</code></pre></li>
</ul>
<p>请求报文：<br><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/2075673-a7d5616fac0adec7.png" alt="请求报文"></p>
<h2 id="浏览器解析Html"><a href="#浏览器解析Html" class="headerlink" title="浏览器解析Html"></a>浏览器解析Html</h2><p>浏览器按顺序解析html文件，构建DOM树，在解析到外部的css和js文件时，向服务器发起请求下载资源，若是下载css文件，则解析器会在下载的同时继续解析后面的html来构建DOM树，则在下载js文件和执行它时，解析器会停止对html的解析。这便出现了js阻塞问题。</p>
<p><strong>预加载器</strong>：<br>当浏览器被脚本文件阻塞时，预加载器（一个轻量级的解析器）会继续解析后面的html，寻找需要下载的资源。如果发现有需要下载的资源，预加载器在开始接收这些资源。预加载器只能检索HTML标签中的URL，无法检测到使用脚本添加的URL，这些资源要等脚本代码执行时才会获取。</p>
<p>注: 预解析并不改变Dom树，它将这个工作留给主解析过程<br>浏览器解析css，形成CSSOM树，当DOM树构建完成后，浏览器引擎通过DOM树和CSSOM树构造出渲染树。渲染树中包含可视节点的样式信息（不可见节点将不会被添加到渲染树中，如：head元素和display值为none的元素）</p>
<blockquote>
<p>值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。</p>
</blockquote>
<h2 id="浏览器布局渲染"><a href="#浏览器布局渲染" class="headerlink" title="浏览器布局渲染"></a>浏览器布局渲染</h2><ul>
<li>布局：通过计算得到每个渲染对象在可视区域中的具体位置信息（大小和位置），这是一个递归的过程。</li>
<li>绘制：将计算好的每个像素点信息绘制在屏幕上</li>
</ul>
<p>在页面显示的过程中会多次进行Reflow和Repaint操作，而Reflow的成本比Repaint的成本高得多的多。因为Repaint只是将某个部分进行重新绘制而不用改变页面的布局，如：改变了某个元素的背景颜色。而如果将元素的display属性由block改为none则需要Reflow。</p>
<p><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/2075673-e6b92f5c6c8c50d4.png" alt="rpaint&amp;reflow"></p>
]]></content>
  </entry>
  <entry>
    <title>数据库事务(Transaction)</title>
    <url>/2019/04/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1(Transaction)/</url>
    <content><![CDATA[<h1 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h1><ul>
<li><p><em>Transaction</em></p>
</li>
<li><blockquote>
<p>数据库事务(transaction)就是一组SQL语句，这组SQL语句是一个<strong>逻辑工作单元</strong>(logical unit of work). 可以认为事务就是一组不可分割的SQL语句，其结果应该作为整体永久性地修改数据库的内容，或者作为整体取消对数据库的修改。                    </p>
<blockquote>
<p>(精通Oracle Database 12c SQL&amp;PL/SQL编程 269)</p>
</blockquote>
</blockquote>
</li>
<li><p>数据库事务的一个例子就是将钱从一个银行账户转到另一个银行账户中去。此时通常包含两个操作：一条UPDATE语句负责从一个银行账户的总额中减去一定的钱数，另一条UPDATE语句负责向另一个银行账户中增加相应的钱数。减少和增加这两个操作必须永久性的记录到数据库中，否则钱就会丢失。如果钱的转账有问题，就必须同时取消减少和增加 这两个操作。这个简单的例子只使用了两条UPDATE语句，然而事务可以包含多条INSERT、UPDATE、和DELETE语句。</p>
</li>
<li><p>换言之，事务可以概括为：一个最小的不可再分的工作单元；通常一个事务对应一个完整的业务(例如银行账户转账业务，该业务就是一个最小的工作单元)</p>
</li>
<li><p>一个完整的业务需要批量的DML(<code>insert</code>、<code>update</code>、<code>delete</code>)语句共同联合完成</p>
</li>
<li><p>事务只和DML语句有关，或者说DML语句才有事务。这个和业务逻辑有关，业务逻辑不同，DML语句的个数不同</p>
</li>
</ul>
<h2 id="事务的提交和回滚"><a href="#事务的提交和回滚" class="headerlink" title="事务的提交和回滚"></a>事务的提交和回滚</h2><p>要永久性的记录事务中的SQL语句的结果，需要执行<code>COMMIT</code>语句。<br>要取消SQL语句的结果，需要执行<code>ROLLBACK</code>语句，将所有行重新设置为原始状态。</p>
<h2 id="事务的开始与结束"><a href="#事务的开始与结束" class="headerlink" title="事务的开始与结束"></a>事务的开始与结束</h2><p>事务是用来分割SQL语句的逻辑工作单元。事务既有起点，也有终点；<br><strong>当下列事件之一发生时，事务就开始了：</strong></p>
<ul>
<li>连接到数据库，并执行一条DML语句(INSERT、UPDATE、或DELETE)。注意，<code>MERGE</code>也是DML语句。</li>
<li>前一个事务结束后，又输入了另一条DML语句。</li>
</ul>
<p><strong>当下列事件之一发生时，事务就结束了：</strong></p>
<ul>
<li>执行<code>COMMIT</code>或<code>ROLLBACK</code>语句。</li>
<li>执行一条<code>DDL</code>语句，例如<code>CREATE TABLE</code>语句；在这种情况下，会自动执行COMMIT语句。</li>
<li>执行一条<code>DCL</code>语句，例如<code>GRANT</code>语句；在这种情况下会自动执行COMMIT语句。<blockquote>
<p>注意： 自动的<em>COMMIT</em>语句被加在<em>DDL</em>和<em>DCL</em>语句前，因此即使<em>DDL</em>和<em>DCL</em>语句没有成功，也会执行<em>COMMIT</em>语句。</p>
</blockquote>
</li>
<li>断开数据库的连接。断开连接时会执行<code>COMMIT</code>语句，但是当意外中止(如程序崩溃)时，会自动执行<code>ROLLBACK</code>语句。这适用于任何可能访问数据库的程序。例如，如果编写了一个可以访问数据库的Java程序，而这个程序崩溃了，就会自动执行ROLLBACK语句。</li>
<li>执行了一条<code>DML</code>语句，该语句却失败了；在这种情况下，会自动为这条无效的DML语句执行ROLLBACK语句。</li>
</ul>
<p><strong>提示 ：</strong><br>    <em>不显式提交或回滚被认为是不好的编程习惯，因此确保在每个事务后面都要执行COMMIT或者ROLLBACK语句。</em></p>
<h2 id="保存点"><a href="#保存点" class="headerlink" title="保存点"></a>保存点</h2><p>在事务中的任何地方都可以设置<strong>保存点(savepoint)</strong>，这样可以将修改回滚到保存点处。如果有一个很大的事务，这将非常有用，因为这样如果在保存点后进行了误操作，并不需要将整个事务一直回滚到最开头。但是保存点不能肆意乱用；最好是重新调整一下事务的结构，将其转换为较小的事务。</p>
<h2 id="事务与数据库底层数据"><a href="#事务与数据库底层数据" class="headerlink" title="事务与数据库底层数据"></a>事务与数据库底层数据</h2><p>在事务进行过程中，未结束之前，DML语句是不会更改底层数据，只是将历史操作记录一下，在内存中完成记录。只有在事物结束的时候，而且是成功的结束的时候，才会修改底层硬盘文件中的数据。</p>
<h1 id="事务的ACID特性"><a href="#事务的ACID特性" class="headerlink" title="事务的ACID特性"></a>事务的ACID特性</h1><p>在前面我们将事务定义为逻辑工作单元，即一组相关的SQL语句，它们要么作为一个单位被<strong>提交</strong>，要么作为一个单位被<strong>回滚</strong>。数据库理论对事务采用了更严格的定义，说明事务有4个基本的特征，称为ACID特性。</p>
<ul>
<li><strong>原子性(Atomic)：</strong>    事务是原子的，这就是说事务中包含的所有SQL语句组成一个工作单元。</li>
<li><strong>一致性(Consist)：</strong>    事务必须确保数据的状态保持一致，这就是说事务开始时，数据库的状态是一致的；在事务结束后，数据库的状态也必须是一致的。</li>
<li><strong>隔离性(Isolated)：</strong>  多个事务可以独立运行，而不会彼此产生影响。</li>
<li><strong>持久性(Durable)：</strong>    一旦事务被提交之后，数据库的变化就会被永久保存下来，即使运行数据库的软件的机器后来崩溃也是如此。</li>
</ul>
<h1 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h1><p>Oracle数据库软件支持多个用户同时与数据库进行交互，每个用户都可以同时运行自己的事务。这种事务就称为并发事务(concurrent transaction)。</p>
<p>如果用户同时运行多个事务，而这些事务都对同一个表产生影响，那么这些事务的影响都是独立的，直到执行一条COMMIT语句时才会彼此产生影响。</p>
<p>下面两个事务T1和T2都会访问customers表，看下面这个例子展示事务的隔离性：</p>
<pre><code>1. T1和T2分别执行SELECT语句，检索customers表的所有行
2. T1执行INSERT语句，向customers表中插入数据，但此时T1并不执行COMMIT语句。
3. T2再执行一条SELECT语句，检索结果和步骤1中相同，T2没有“看到”T1在步骤2中插入的新行。
4. T1最后执行COMMIT语句，永久性的保存了插入的新行。
5. T2执行一条SELECT语句，最终看到了T1插入的新行。</code></pre><p>以上过程可以归纳如下： 直到T1提交自己对数据库所做的修改之后，T2才能看得到T1对数据库所做的修改。这是事务间隔离性的默认级别。<strong><em>隔离性级别可以修改</em></strong></p>
<table>
<thead>
<tr>
<th>事务T1</th>
<th>事务T2</th>
</tr>
</thead>
<tbody><tr>
<td>(1) <strong>SELECT * FROM customers;</strong></td>
<td>(2) <strong>SELECT * FROM customers;</strong></td>
</tr>
<tr>
<td>(3) <strong>INSERT INTO customers(xx, xx, xx) VALUES (XX, XX, XX);</strong></td>
<td></td>
</tr>
<tr>
<td>(4)<strong>UPDATE customers SET xx = XX WHERE customer_xx = X;</strong></td>
<td></td>
</tr>
<tr>
<td>(5) <strong>SELECT * FROM customers;</strong>返回的结果集中包含新插入的行和修改后的行</td>
<td>(6) <strong>SELECT * FROM customers;</strong>返回的结果集中不包含事务T1插入和修改后的行，而是在步骤2中检索出来的原来的行</td>
</tr>
<tr>
<td>(7) <strong>COMMIT;</strong>提交新行和所做的修改</td>
<td></td>
</tr>
<tr>
<td></td>
<td>(8)<strong>SELECT * FROM customers;</strong> 返回的结果集中包含T1在步骤3和步骤4中插入和修改的行</td>
</tr>
</tbody></table>
<h1 id="事务锁"><a href="#事务锁" class="headerlink" title="事务锁"></a>事务锁</h1><p>要实现并发事务，Oracle 数据库软件必须确保表中的数据一直有效。这可以通过<strong>锁(lock)</strong>来实现。下面这个例子：事务T1和T2都试图修改customers表中的顾客#1：</p>
<ol>
<li>T1执行一条UPDATE语句，修改顾客#1,但是T1并没有执行COMMIT语句。此时就称T1对该行“加锁”了。</li>
<li>T2也试图执行一条UPDATE语句，修改顾客#1，但是由于该行早已被T1加锁了，因此T2现在就不能获得该行的锁。T2的UPDATE语句必须一直等待，直到T1结束并释放该行上的锁为止。</li>
<li>T1执行COMMIT语句并结束，从而释放该行上的锁。</li>
<li>T2获得该行上的锁，并执行UPDATE语句。T2在获得该行上的锁后一直持有，直到T2结束为止。</li>
</ol>
<p>以上过程概括为： 当一个事务已经拥有某一行上的锁时，另外一个事务不能获得该行上的锁。</p>
<blockquote>
<p><strong>注意：</strong><br>理解默认加锁机制的最简单方法如下：<code>读程序(reader)</code>不会阻碍<code>读程序</code>；<code>写程序(writer)</code>不会阻碍<code>读程序</code>；只有在试图对相同的行进行修改时，<code>写程序</code>才会阻碍<code>写程序</code>。</p>
</blockquote>
<h1 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h1><p>在SQL的标准中，定义了四种隔离级别。每一种级别都规定了，在一个事务中所做的修改，哪些在事务内和事务间是可见的，哪些是不可见的。低级别的隔离可以执行更高级别的并发，性能好，但是会出现脏读和幻读的现象。首先，我们从三个基础的概念说起：</p>
<ul>
<li><p><strong>脏读（dirty read）：</strong>两个事务，一个事务读取到了另一个事务未提交的数据，这便是脏读。</p>
</li>
<li><p><strong>幻读（phantom read）：</strong>两个事务，事务A与事务B，事务A在自己执行的过程中，执行了两次相同查询，第一次查询事务B未提交，第二次查询事务B已提交，从而造成两次查询结果不一样，这个其实被称为不可重复读；如果事务B是一个会影响查询结果的insert操作，则好像新多出来的行像幻觉一样，因此被称为幻读。其他事务的提交会影响在同一个事务中的重复查询结果。</p>
</li>
<li><p><strong>不可重复读（nonrepeatable read）：</strong>两个事务，事务T1读取一行，紧接着事务T2修改了T1刚才读取的那一行的内容。然后T1又读取了这一行，发现它与刚才读取的结果不同了。这种现象称为“不可重复读”，因为T1原来读取的那一行已经发生了变化。</p>
</li>
</ul>
<p>下面简单描述一下SQL中定义的四种标准隔离级别：</p>
<ol>
<li><strong>READ UNCOMMITTED (未提交读) ：</strong></li>
</ol>
<ul>
<li>隔离级别：0. </li>
<li>事物A和事物B，事物A未提交的数据，事物B可以读取到</li>
<li>可以读取未提交的记录。</li>
<li>会出现脏读。</li>
<li>这种隔离级别最低，这种级别一般是在理论上存在，数据库隔离级别一般都高于该级别</li>
</ul>
<ol>
<li><strong>READ COMMITTED (提交读) ：</strong></li>
</ol>
<ul>
<li>隔离级别：1. </li>
<li>事物A和事物B，事物A提交的数据，事物B才能读取到</li>
<li>事务中只能看到已提交的修改。</li>
<li>不可重复读，会出现幻读。（在InnoDB中，会加行所，但是不会加间隙锁）</li>
<li>该隔离级别是大多数数据库系统(如Oracle)的默认隔离级别，但是MySQL的则是RR。</li>
</ul>
<ol>
<li><strong>REPEATABLE READ (可重复读) ：</strong></li>
</ol>
<ul>
<li>隔离级别：2. </li>
<li>事务A和事务B，事务A提交之后的数据，事务B读取不到</li>
<li>事务B是可重复读取数据</li>
<li>换句话说，对方提交之后的数据，我还是读取不到</li>
<li>MySQL默认级别</li>
<li>在InnoDB中是这样的：RR隔离级别保证对读取到的记录加锁 (记录锁)，同时保证对读取的范围加锁，新的满足查询条件的记录不能够插入 (间隙锁)，因此不存在幻读现象。但是标准的RR只能保证在同一事务中多次读取同样记录的结果是一致的，而无法解决幻读问题。</li>
<li>InnoDB的幻读解决是依靠MVCC的实现机制做到的。</li>
</ul>
<ol>
<li><strong>SERIALIZABLE （可串行化）：</strong></li>
</ol>
<ul>
<li>隔离级别：3. </li>
<li>事务A和事务B，事务A在操作数据库时，事务B只能排队等待</li>
<li>这种隔离级别很少使用，吞吐量太低，用户体验差</li>
<li>这种级别可以避免“幻像读”，每一次读取的都是数据库中真实存在数据，事务A与事务B串行，而不并发</li>
<li>该隔离级别会在读取的每一行数据上都加上锁，退化为基于锁的并发控制，即LBCC。
　　<blockquote>
<p>需要注意的是，MVCC只在RC和RR两个隔离级别下工作，其他两个隔离级别都和MVCC不兼容。</p>
</blockquote>
</li>
</ul>
<h2 id="设置事务隔离级别"><a href="#设置事务隔离级别" class="headerlink" title="设置事务隔离级别"></a>设置事务隔离级别</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><ul>
<li><p>可以在my.ini文件中使用transaction-isolation选项来设置服务器的缺省事务隔离级别。</p>
</li>
<li><p>该选项值可以是</p>
<pre><code>– READ-UNCOMMITTED
– READ-COMMITTED
– REPEATABLE-READ
– SERIALIZABLE

•   例如：
[mysqld]
transaction-isolation = READ-COMMITTED</code></pre></li>
</ul>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><ul>
<li>通过命令动态设置隔离级别<ul>
<li>隔离级别也可以在运行的服务器中动态设置，应使用SET TRANSACTION ISOLATION LEVEL语句。</li>
<li>其语法模式为：<pre><code>SET [GLOBAL | SESSION] TRANSACTION ISOLATION LEVEL &lt;isolation-level&gt;
其中的&lt;isolation-level&gt;可以是：
–   READ UNCOMMITTED
–   READ COMMITTED
–   REPEATABLE READ
–   SERIALIZABLE
•   例如： SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;</code></pre></li>
</ul>
</li>
</ul>
<h2 id="隔离级别的作用范围"><a href="#隔离级别的作用范围" class="headerlink" title="隔离级别的作用范围"></a>隔离级别的作用范围</h2><pre><code>•   事务隔离级别的作用范围分为两种： 
–   全局级：对所有的会话有效 
–   会话级：只对当前的会话有效 
•   例如，设置会话级隔离级别为READ COMMITTED ：
mysql&gt; SET TRANSACTION ISOLATION LEVEL READ COMMITTED；
或：
mysql&gt; SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED；
•   设置全局级隔离级别为READ COMMITTED ： 
mysql&gt; SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED；</code></pre><h2 id="查看隔离级别"><a href="#查看隔离级别" class="headerlink" title="查看隔离级别"></a>查看隔离级别</h2><pre><code>select @@global.tx_isolation, @@tx_isolation 和 show variables like &apos;%isolation%&apos;</code></pre><blockquote>
<p>关于事务隔离级别，锁，以及并发控制与加锁分析，可参考的技术博客<br>    <a href="https://xtzhu.github.io/2019/03/20/%E9%9D%A2%E8%AF%95%E9%A2%9870-80/#20">事务隔离级别</a><br>    <a href="https://www.cnblogs.com/yelbosh/p/5813865.html">并发控制与加锁分析</a><br>    <a href="https://note.youdao.com/ynoteshare1/index.html?id=daad612052801c77458ee3fa5b366e20&type=note&from=timeline&isappinstalled=0#/">MySQL 加锁处理分析</a></p>
</blockquote>
<blockquote>
<p>引用的技术博客<br>    <a href="https://blog.csdn.net/w_linux/article/details/79666086">MySQL——事务(Transaction)详解</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL/Orcale</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>有关JS的数组方法</title>
    <url>/2019/05/06/%E6%9C%89%E5%85%B3JS%E7%9A%84%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>每多学一点知识，就少写一行代码</p>
</blockquote>
<h2 id="length-长度属性"><a href="#length-长度属性" class="headerlink" title="length - 长度属性"></a>length - 长度属性</h2><p>每个Array都有一个length属性，稠密数组,length属性代表数组中元素的个数；稀疏数组，length属性大于元素的个数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">//3</span></span><br><span class="line">arr.length = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-isArray-数组类型"><a href="#Array-isArray-数组类型" class="headerlink" title="Array.isArray - 数组类型"></a>Array.isArray - 数组类型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray([<span class="number">1</span>,<span class="number">2</span>]));</span><br></pre></td></tr></table></figure>

<h2 id="Array-of-创建数组"><a href="#Array-of-创建数组" class="headerlink" title="Array.of - 创建数组"></a>Array.of - 创建数组</h2><p>从可变数量的参数创建数组，不管参数的数量或者类型如何</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)); <span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-from-创建数组"><a href="#Array-from-创建数组" class="headerlink" title="Array.from  - 创建数组"></a>Array.from  - 创建数组</h2><p>用类数组或可迭代对象创建新数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(<span class="string">&#x27;abcd&#x27;</span>)); <span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="function"><span class="params">x</span>=&gt;</span>x+<span class="number">1</span>)); <span class="comment">//[2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><h3 id="find-按函数查找"><a href="#find-按函数查找" class="headerlink" title="find - 按函数查找"></a>find - 按函数查找</h3><p>Array.prototype.find()找到<strong>第一个</strong>满足检测条件的元素，并返回该元素，反之返回undefined.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.find(<span class="function"><span class="params">x</span> =&gt;</span> x&gt;<span class="number">3</span>)); <span class="comment">//4</span></span><br></pre></td></tr></table></figure>

<h3 id="findIndex-按函数查找"><a href="#findIndex-按函数查找" class="headerlink" title="findIndex - 按函数查找"></a>findIndex - 按函数查找</h3><p>Array.prototype.findIndex() 找到<strong>第一个</strong>满足检测条件的元素，并返回该元素索引，反之返回-1.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.findIndex(<span class="function"><span class="params">x</span> =&gt;</span> x&gt;<span class="number">3</span>)); <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<h3 id="indexOf-按元素值查找"><a href="#indexOf-按元素值查找" class="headerlink" title="indexOf-按元素值查找"></a>indexOf-按元素值查找</h3><p>Array.prototype.indexOf() 查找元素并返回元素索引值，找不到返回-1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr= [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">3</span>));    <span class="comment">// 输出 2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">6</span>));    <span class="comment">// 输出 -1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">2</span>, <span class="number">2</span>));    <span class="comment">// 输出 -1</span></span><br></pre></td></tr></table></figure>

<p>第二个参数表示查找的起始位置。</p>
<h3 id="lastIndexOf-按元素值查找"><a href="#lastIndexOf-按元素值查找" class="headerlink" title="lastIndexOf-按元素值查找"></a>lastIndexOf-按元素值查找</h3><p>Array.prototype.lastIndexOf() 从后向前查找元素并返回元素索引值，找不到返回 -1。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">&#x27;b&#x27;</span>));    <span class="comment">// 输出 1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">&#x27;e&#x27;</span>));    <span class="comment">// 输出 -1</span></span><br></pre></td></tr></table></figure>
<h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><h3 id="push-尾部添加"><a href="#push-尾部添加" class="headerlink" title="push - 尾部添加"></a>push - 尾部添加</h3><p>Array.prototype.push() 在尾部添加一个或多个元素，返回数组的新长度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array1= [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array1.push(<span class="string">&#x27;d&#x27;</span>));   <span class="comment">// 输出 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array1);   <span class="comment">// 输出 [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ]</span></span><br></pre></td></tr></table></figure>

<h3 id="unshift-头部添加"><a href="#unshift-头部添加" class="headerlink" title="unshift-头部添加"></a>unshift-头部添加</h3><p>Array.prototype.unshift() 在头部添加一个或多个元素，并返回数组的新长度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array1 = [ <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ];</span><br><span class="line"><span class="built_in">console</span>.log(array1.unshift(<span class="number">3</span>));    <span class="comment">// 输出 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array1);    <span class="comment">// 输出 [ 3, 4, 5, 6 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.unshift(<span class="number">1</span>, <span class="number">2</span>));    <span class="comment">// 输出 6</span></span><br><span class="line"><span class="built_in">console</span>.log(array1);    <span class="comment">// 输出 [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure>
<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><h3 id="pop-尾部删除"><a href="#pop-尾部删除" class="headerlink" title="pop-尾部删除"></a>pop-尾部删除</h3><p>Array.prototype.pop() 从尾部删除一个元素，并返回该元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1= [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array1.pop());    <span class="comment">// 输出 d</span></span><br><span class="line"><span class="built_in">console</span>.log(array1);    <span class="comment">// 输出 [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]</span></span><br></pre></td></tr></table></figure>

<h3 id="shift-头部删除"><a href="#shift-头部删除" class="headerlink" title="shift-头部删除"></a>shift-头部删除</h3><p>Array.prototype.shift() 从头部删除一个元素，并返回该元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array1.shift());    <span class="comment">// 输出 1</span></span><br><span class="line"><span class="built_in">console</span>.log(array1);    <span class="comment">// 输出 [ 2, 3 ]</span></span><br></pre></td></tr></table></figure>

<h2 id="替换元素"><a href="#替换元素" class="headerlink" title="替换元素"></a>替换元素</h2><h3 id="splice-添加替换删除"><a href="#splice-添加替换删除" class="headerlink" title="splice-添加替换删除"></a><strong>splice</strong>-添加替换删除</h3><p>Array.prototype.splice() 添加、替换、删除元素。会改变原数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 = [ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span> ];</span><br><span class="line">array1.splice( <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array1);    <span class="comment">// 输出 [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ]</span></span><br><span class="line">array1.splice(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array1);    <span class="comment">// 输出 [ &quot;a&quot;, &quot;c&quot;, &quot;d&quot; ]</span></span><br><span class="line">array1.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array1);    <span class="comment">// 输出 [ &quot;a&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;d&quot; ]</span></span><br><span class="line">array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</span><br></pre></td></tr></table></figure>

<ul>
<li>参数 start：表示替换的位置</li>
<li>参数 deleteCount ：表示删除元素的数量</li>
<li>参数 item1… ： 表示添加的元素</li>
</ul>
<h2 id="顺序相关"><a href="#顺序相关" class="headerlink" title="顺序相关"></a>顺序相关</h2><h3 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort-排序"></a>sort-排序</h3><p>Array.prototype.sort() 数组排序，改变原数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 = [ <span class="number">4</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">2</span> ];</span><br><span class="line"><span class="built_in">console</span>.log(array1.sort());    <span class="comment">// 输出 [ 10, 2, 3, 4 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.sort(<span class="function">(<span class="params">x1, x2</span>) =&gt;</span> x1 - x2));    <span class="comment">// 输出 [ 2, 3, 4, 10]</span></span><br></pre></td></tr></table></figure>

<h3 id="reverse-反序"><a href="#reverse-反序" class="headerlink" title="reverse-反序"></a>reverse-反序</h3><p>Array.prototype.reverse() 倒置数组，并返回新数组。会改变原数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> sourceArray= [ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> ];</span><br><span class="line"><span class="keyword">var</span> reverseArray = sourceArray.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(reverseArray);    <span class="comment">// 输出 [ &quot;c&quot;, &quot;b&quot;, &quot;a&quot; ]</span></span><br><span class="line"><span class="built_in">console</span>.log(sourceArray == reverseArray);    <span class="comment">// 输出 true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="遍历迭代"><a href="#遍历迭代" class="headerlink" title="遍历迭代"></a>遍历迭代</h2><h3 id="keys-键迭代器"><a href="#keys-键迭代器" class="headerlink" title="keys-键迭代器"></a>keys-键迭代器</h3><p>Array.prototype.keys() 数组的键迭代器。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> array1.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);     <span class="comment">// 输出 0, 1, 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="values-值迭代器"><a href="#values-值迭代器" class="headerlink" title="values-值迭代器"></a>values-值迭代器</h3><p>Array.prototype.values() 数组的值迭代器。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = array1.values();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);     <span class="comment">// 输出 a b c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="entries-键-值对迭代器"><a href="#entries-键-值对迭代器" class="headerlink" title="entries-键/值对迭代器"></a>entries-键/值对迭代器</h3><p>Array.prototype.entries() 数组的键/值对迭代器。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> iterator1 = array1.entries();</span><br><span class="line"><span class="built_in">console</span>.log(iterator1.next().value);    <span class="comment">// 输出 Array [0, &quot;a&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator1.next().value);    <span class="comment">// 输出 Array [ 1, &quot;b&quot; ] </span></span><br></pre></td></tr></table></figure>

<h3 id="forEach-遍历"><a href="#forEach-遍历" class="headerlink" title="forEach-遍历"></a>forEach-遍历</h3><p>Array.prototype.forEach() 遍历数组中的元素，并执行回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x + <span class="number">1</span>);    <span class="comment">// 输出 2  3  4  5</span></span><br><span class="line">&#125;);    </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h2><h3 id="includes-值包含检测"><a href="#includes-值包含检测" class="headerlink" title="includes-值包含检测"></a>includes-值包含检测</h3><p>Array.prototype.includes() 值包含检测，如包含返回 true，不包含返回false。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array1.includes(<span class="number">2</span>));    <span class="comment">// 输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.includes(<span class="number">4</span>));    <span class="comment">// 输出 false</span></span><br></pre></td></tr></table></figure>

<h3 id="some-函数包含检测"><a href="#some-函数包含检测" class="headerlink" title="some-函数包含检测"></a>some-函数包含检测</h3><p>Array.prototype.some() 检测数组中是否有元素可以通过检测函数验证。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ];</span><br><span class="line"><span class="built_in">console</span>.log(array1.some(<span class="function"><span class="params">x</span> =&gt;</span> x &gt;<span class="number">3</span>));    <span class="comment">// 输出  true</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.some(<span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">5</span>));    <span class="comment">// 输出  false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="every-函数完全检测"><a href="#every-函数完全检测" class="headerlink" title="every-函数完全检测"></a>every-函数完全检测</h3><p>Array.prototype.every() 检测数组中是否所有元素都可以通过检测函数验证。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ];</span><br><span class="line"><span class="built_in">console</span>.log(array1.every(<span class="function"><span class="params">x</span> =&gt;</span> x &lt; <span class="number">8</span>));    <span class="comment">//输出 true</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.every(<span class="function"><span class="params">x</span> =&gt;</span> x &lt; <span class="number">4</span>));    <span class="comment">//输出 false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><h3 id="join-合并成字符串"><a href="#join-合并成字符串" class="headerlink" title="join-合并成字符串"></a>join-合并成字符串</h3><p>Array.prototype.join() 合并数组中所有元素成为字符串并返回。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1= [ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> ];</span><br><span class="line"><span class="built_in">console</span>.log(array1.join());    <span class="comment">// 输出 a,b,c</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.join(<span class="string">&quot;-&quot;</span>));   <span class="comment">// 输出 a-b-c</span></span><br></pre></td></tr></table></figure>

<h3 id="concat-合并成数组"><a href="#concat-合并成数组" class="headerlink" title="concat-合并成数组"></a>concat-合并成数组</h3><p>Array.prototype.concat() 合并两个或多个数组，返回一个全新数组，原数组不变。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 = [ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span> ];</span><br><span class="line"><span class="keyword">var</span> array2 = [ <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span> ];</span><br><span class="line"><span class="built_in">console</span>.log(array1.concat(array2));    <span class="comment">// 输出 [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="累计"><a href="#累计" class="headerlink" title="累计"></a>累计</h2><h3 id="reduce-左侧累计"><a href="#reduce-左侧累计" class="headerlink" title="reduce-左侧累计"></a>reduce-左侧累计</h3><p>Array.prototype.reduce() 从左至右按 reducer 函数组合元素值，并返回累计器终值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue;</span><br><span class="line"><span class="comment">// 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.reduce(reducer));    <span class="comment">// 输出 10</span></span><br><span class="line"><span class="comment">// 5 + 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.reduce(reducer, <span class="number">5</span>));    <span class="comment">// 输出 15，其中5是累计器初始值。</span></span><br></pre></td></tr></table></figure>

<h3 id="reduceRight-右侧累计"><a href="#reduceRight-右侧累计" class="headerlink" title="reduceRight-右侧累计"></a>reduceRight-右侧累计</h3><p>Array.prototype.reduceRight() 从右至左按 reducer 函数组合元素值，并返回累计器终值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> accumulator.concat(currentValue);</span><br><span class="line"><span class="built_in">console</span>.log(array1.reduceRight(reducer));    <span class="comment">// 输出 [ 4, 3, 2, 1 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.reduceRight(reducer, <span class="number">5</span>));    <span class="comment">// 输出 [ 5, 4, 3, 2, 1 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="copyWithin-内部复制"><a href="#copyWithin-内部复制" class="headerlink" title="copyWithin-内部复制"></a>copyWithin-内部复制</h2><p>Array.prototype.copyWithin() 数组内部复制，不改变原数组长度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array1.copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>));    <span class="comment">// 输出 [ &quot;d&quot;, &quot;e&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot; ]</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.copyWithin(<span class="number">1</span>, <span class="number">3</span>));    <span class="comment">// 输出 [ &quot;d&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;e&quot;, &quot;f&quot; ]</span></span><br><span class="line">arr.copyWithin(target[, start[, end]])</span><br></pre></td></tr></table></figure>

<ul>
<li>参数target : 表示要复制到的索引位置，如为负值则从后向前计数。</li>
<li>参数start : 表示要复制序列的起始索引位置，如为负值则从后向前计数。如省略该值，则从索引0开始。</li>
<li>参数end : 表示要复制序列的结束位置，如为负值则从后向前计数。如省略该值，则复制到结尾位置。</li>
</ul>
<h2 id="fill-填充函数"><a href="#fill-填充函数" class="headerlink" title="fill-填充函数"></a>fill-填充函数</h2><p>Array.prototype.fill() 用固定值填充起始索引到终止索引区间内的全部元素值，不包括终止索引。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array1.fill(<span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>));    <span class="comment">// 输出 [ 1, 2, 9, 9 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.fill(<span class="number">8</span>, <span class="number">1</span>));      <span class="comment">// 输出 [ 1, 8, 8, 8 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.fill(<span class="number">7</span>));          <span class="comment">// 输出 [ 7, 7, 7, 7 ]</span></span><br></pre></td></tr></table></figure>

<h2 id="filter-过滤函数"><a href="#filter-过滤函数" class="headerlink" title="filter-过滤函数"></a>filter-过滤函数</h2><p>Array.prototype.filter() 生成由通过检测函数验证元素组成的新数组并返回。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [ <span class="number">9</span> , <span class="number">8</span> , <span class="number">7</span> , <span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.filter(<span class="function"><span class="params">x</span> =&gt;</span> x &gt;<span class="number">7</span>));    <span class="comment">//输出 [ 9, 8 ]</span></span><br></pre></td></tr></table></figure>

<h2 id="flat-数组扁平化"><a href="#flat-数组扁平化" class="headerlink" title="flat-数组扁平化"></a>flat-数组扁平化</h2><p>Array.prototype.flat() 按指定深度递归遍历数组，并返回包含所有遍历到的元素组成的新数组。不改变原数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [ <span class="number">1</span>, <span class="number">2</span>, [ <span class="number">3</span>, <span class="number">4</span> ] ];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.flat());     <span class="comment">// 输出 [ 1, 2, 3, 4 ]</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [ <span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [ <span class="number">5</span>, <span class="number">6</span> ] ] ];</span><br><span class="line"><span class="built_in">console</span>.log(arr2.flat());    <span class="comment">// 输出 [ 1, 2, 3, 4,  [ 5, 6 ] ]</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, [ <span class="number">3</span>, <span class="number">4</span>, [ <span class="number">5</span>, <span class="number">6</span> ] ] ];</span><br><span class="line"><span class="built_in">console</span>.log(arr3.flat(<span class="number">2</span>));    <span class="comment">// 输出 [ 1, 2, 3, 4, 5, 6 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="map-映射"><a href="#map-映射" class="headerlink" title="map-映射"></a>map-映射</h2><p>Array.prototype.map() 创建一个新数组，该数组中的元素由原数组元素调用map函数产生。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array1.map(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>));    <span class="comment">// 输出 [ 2, 4, 6, 8 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="slice-截取数组"><a href="#slice-截取数组" class="headerlink" title="slice-截取数组"></a>slice-截取数组</h2><p>Array.prototype.slice() 按参数begin 和 end 截取数组，不改变原数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> array1 = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array1.slice( <span class="number">2</span>, <span class="number">4</span> ));    <span class="comment">//输出 [ 3, 4 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(array1);    <span class="comment">//输出 [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>浅拷贝与深拷贝</title>
    <url>/2019/05/10/%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<blockquote>
<p>引用： <a href="http://jartto.wang/2016/03/19/js-deep-copy/">http://jartto.wang/2016/03/19/js-deep-copy/</a></p>
</blockquote>
<p>javascript之浅拷贝和深拷贝</p>
<h1 id="什么是浅拷贝？"><a href="#什么是浅拷贝？" class="headerlink" title="什么是浅拷贝？"></a>什么是浅拷贝？</h1><p>js中的赋值都为引用传递，这也就是说，在把一个对象赋值给一个变量（对象）,那么这个变量（对象）所指向的仍就是原来对象的地址，引用就是浅拷贝。</p>
<p>看概念我们可能不太容易理解，下面拿一个简单的栗子来说说吧：<br>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1=&#123;<span class="attr">name</span>:<span class="string">&#x27;jartto&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2=&#123;&#125;;</span><br><span class="line"><span class="comment">//复制obj1， 给obj2赋值</span></span><br><span class="line">obj2=obj1;</span><br><span class="line"><span class="built_in">console</span>.log(obj2.name);<span class="comment">//jartto</span></span><br><span class="line"><span class="comment">//更改obj2.name</span></span><br><span class="line">obj2.name=<span class="string">&#x27;somebody&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2.name);<span class="comment">//somebody</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.name);<span class="comment">//somebody</span></span><br></pre></td></tr></table></figure>

<p>例子中可以看出，obj2更改了，obj1也被更改了。这说明name仍然存在公共的引用对象，我们的拷贝并不彻底，冒然的使用很有可能带来大的灾难。这时候深拷贝就该上场了，我们接着往下走。</p>
<h1 id="什么是深拷贝？"><a href="#什么是深拷贝？" class="headerlink" title="什么是深拷贝？"></a>什么是深拷贝？</h1><p>深拷贝就是不仅复制对象的基本类,同时也复制原对象中的对象。就是说完全是新对象产生的，新对象所指向的不是原来对象的地址。</p>
<p>同上面的队形，我们还拿栗子来说事：<br>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2=arr1.concat();</span><br><span class="line"><span class="comment">//输出arr2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2)</span><br><span class="line"><span class="comment">//更改arr2的值</span></span><br><span class="line">arr2[<span class="number">0</span>]=<span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1);<span class="comment">//[1,2,3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);<span class="comment">//[5,2,3]</span></span><br></pre></td></tr></table></figure>

<p>arr2的值变化了，但是arr1的值并未受到影响。这也就告诉我们concat进行了一个深拷贝，arr2已经指向了新的引用地址。js中还有好多类似的例子，这里我就不一一说明啦，感兴趣你可以试试哦。</p>
<blockquote>
<p>“在有指针的情况下，浅拷贝只是增加了一个指针指向已经存在的内存，而深拷贝就是增加一个指针并且申请一个新的内存，使这个增加的指针指向这个新的内存，采用深拷贝的情况下，释放内存的时候就不会出现在浅拷贝时重复释放同一内存的错误！”</p>
</blockquote>
]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>深拷贝</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析session,cookie,sessionStorage,localStorage的区别及应用场景</title>
    <url>/2019/02/19/%E6%B5%85%E6%9E%90session-cookie-sessionStorage-localStorage%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.cnblogs.com/cencenyue/p/7604651.html">原帖地址</a></p>
</blockquote>
<p>浏览器的缓存机制提供了可以将用户数据存储在客户端上的方式，可以利用cookie,session等跟服务端进行数据交互。</p>
<h2 id="一、cookie和session"><a href="#一、cookie和session" class="headerlink" title="一、cookie和session"></a>一、cookie和session</h2><p>cookie和session都是用来跟踪浏览器用户身份的会话方式。</p>
<p><font color=orange>区别：</font></p>
<p>1、<font color=orange>保持状态：</font><font color=blue>cookie</font>保存在浏览器端，<font color=blue>session</font>保存在服务器端</p>
<p>2、使用方式：</p>
<p>（1）cookie机制：如果不在浏览器中设置过期时间，cookie被保存在内存中，生命周期随浏览器的关闭而结束，这种cookie简称会话cookie。如果在浏览器中设置了cookie的过期时间，cookie被保存在硬盘中，关闭浏览器后，cookie数据仍然存在，直到过期时间结束才消失。</p>
<p>  Cookie是服务器发给客户端的特殊信息，cookie是以文本的方式保存在客户端，每次请求时都带上它</p>
<p>（2）session机制：当服务器收到请求需要创建session对象时，首先会检查客户端请求中是否包含sessionid。如果有sessionid，服务器将根据该id返回对应session对象。如果客户端请求中没有sessionid，服务器会创建新的session对象，并把sessionid在本次响应中返回给客户端。通常使用cookie方式存储sessionid到客户端，在交互中浏览器按照规则将sessionid发送给服务器。如果用户禁用cookie，则要使用URL重写，可以通过response.encodeURL(url) 进行实现；API对encodeURL的结束为，当浏览器支持Cookie时，url不做任何处理；当浏览器不支持Cookie的时候，将会重写URL将SessionID拼接到访问地址后。</p>
<p>3、存储内容：cookie只能保存字符串类型，以文本的方式；session通过类似与Hashtable的数据结构来保存，能支持任何类型的对象(session中可含有多个对象)</p>
<p>4、存储的大小：cookie：单个cookie保存的数据不能超过4kb；session大小没有限制。</p>
<p>5、安全性：cookie：针对cookie所存在的攻击：Cookie欺骗，Cookie截获；session的安全性大于cookie。</p>
<p>　　　　原因如下：</p>
<p>（1）sessionID存储在cookie中，若要攻破session首先要攻破cookie；</p>
<p>（2）sessionID是要有人登录，或者启动session_start才会有，所以攻破cookie也不一定能得到sessionID；</p>
<p>（3）第二次启动session_start后，前一次的sessionID就是失效了，session过期后，sessionID也随之失效。</p>
<p>（4）sessionID是加密的</p>
<p>（5）综上所述，攻击者必须在短时间内攻破加密的sessionID，这很难。</p>
<p>6、应用场景：</p>
<p>cookie：</p>
<p>（1）判断用户是否登陆过网站，以便下次登录时能够实现自动登录（或者记住密码）。如果我们删除cookie，则每次登录必须从新填写登录的相关信息。</p>
<p>（2）保存上次登录的时间等信息。</p>
<p>（3）保存上次查看的页面</p>
<p>（4）浏览计数</p>
<p><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/20190219-01.png" alt="示例"></p>
<p>session：Session用于保存每个用户的专用信息，变量的值保存在服务器端，通过SessionID来区分不同的客户。</p>
<p>　　（1）网上商城中的购物车</p>
<p>　　（2）保存用户登录信息</p>
<p>　　（3）将某些数据放入session中，供同一用户的不同页面使用</p>
<p>　　（4）防止用户非法登录</p>
<p> 7、缺点：cookie：<br> （1）大小受限</p>
<p>（2）用户可以操作（禁用）cookie，使功能受限</p>
<p>（3）安全性较低</p>
<p>（4）有些状态不可能保存在客户端。</p>
<p>（5）每次访问都要传送cookie给服务器，浪费带宽。</p>
<p>（6）cookie数据有路径（path）的概念，可以限制cookie只属于某个路径下。</p>
<p>session：</p>
<p> （1）Session保存的东西越多，就越占用服务器内存，对于用户在线人数较多的网站，服务器的内存压力会比较大。</p>
<p>（2）依赖于cookie（sessionID保存在cookie），如果禁用cookie，则要使用URL重写，不安全</p>
<p>（3）创建Session变量有很大的随意性，可随时调用，不需要开发者做精确地处理，所以，过度使用session变量将会导致代码不可读而且不好维护。</p>
<h2 id="二、WebStorage"><a href="#二、WebStorage" class="headerlink" title="二、WebStorage"></a>二、WebStorage</h2><p>WebStorage的目的是克服由cookie所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。</p>
<p>WebStorage两个主要目标：</p>
<p>（1）提供一种在cookie之外存储会话数据的路径。</p>
<p>（2）提供一种存储大量可以跨会话存在的数据的机制。</p>
<p>HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。</p>
<p>1、生命周期：localStorage:localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。</p>
<p>　　　　　　  sessionStorage的生命周期是在仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。</p>
<p>2、存储大小：localStorage和sessionStorage的存储数据大小一般都是：5MB</p>
<p>3、存储位置：localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信。</p>
<p>4、存储内容类型：localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理</p>
<p>5、获取方式：localStorage：window.localStorage;；sessionStorage：window.sessionStorage;。</p>
<p>6、应用场景：localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage：敏感账号一次性登录；</p>
<p>WebStorage的优点：</p>
<p>（1）存储空间更大：cookie为4KB，而WebStorage是5MB；</p>
<p>（2）节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取，也不会像cookie一样美词请求都会传送到服务器，所以减少了客户端和服务器端的交互，节省了网络流量；</p>
<p>（3）对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage会非常方便；</p>
<p>（4）快速显示：有的数据存储在WebStorage上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快；</p>
<p>（5）安全性：WebStorage不会随着HTTP header发送到服务器端，所以安全性相对于cookie来说比较高一些，不会担心截获，但是仍然存在伪造问题；</p>
<p>（6）WebStorage提供了一些方法，数据操作比cookie方便；</p>
<pre><code>setItem (key, value) ——  保存数据，以键值对的方式储存信息。

getItem (key) ——  获取数据，将键值传入，即可获取到对应的value值。

removeItem (key) ——  删除单个数据，根据键值移除对应的信息。

clear () ——  删除所有的数据

key (index) —— 获取某个索引的key</code></pre>]]></content>
      <tags>
        <tag>cookie/session</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式(1)--简单工厂模式</title>
    <url>/2019/04/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(1)--%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在Mybatis中比如SqlSessionFactory使用的是工厂模式，该工厂没有那么复杂的逻辑，是一个简单工厂模式。</p>
<p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>
<p><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/idea64_pNfdoCW73P.png" alt=""></p>
<p>SqlSession可以认为是一个<a href="https://mp.weixin.qq.com/s/EzkQHVmW2deBXlmj9jIOAg">Mybatis</a>工作的核心的接口，通过这个接口可以执行执行SQL语句、获取Mappers、管理事务。类似于连接MySQL的Connection对象。从 0 开始手写一个 Mybatis 框架，这个我推荐你看下。</p>
<p><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/idea64_OWJhevdvRs.png" alt=""></p>
<p>可以看到，该Factory的openSession方法重载了很多个，分别支持autoCommit、Executor、Transaction等参数的输入，来构建核心的SqlSession对象。</p>
<p>在DefaultSqlSessionFactory的默认工厂实现里，有一个方法可以看出工厂怎么产出一个产品：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> SqlSession <span class="title">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">boolean</span> autoCommit)</span> </span>&#123;</span><br><span class="line">   Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="keyword">final</span> Environment environment = configuration.getEnvironment();</span><br><span class="line">     <span class="keyword">final</span> TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">     tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">     <span class="keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     closeTransaction(tx); <span class="comment">// may have fetched a connection so lets call</span></span><br><span class="line">                 <span class="comment">// close()</span></span><br><span class="line">     <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error opening session.  Cause: &quot;</span> + e, e);</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     ErrorContext.instance().reset();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p> 这是一个openSession调用的底层方法，该方法先从configuration读取对应的环境配置，然后初始化TransactionFactory获得一个Transaction对象，然后通过Transaction获取一个Executor对象，最后通过configuration、Executor、是否autoCommit三个参数构建了SqlSession。</p>
<p> 在这里其实也可以看到端倪，SqlSession的执行，其实是委托给对应的Executor来进行的。</p>
<p> 而对于LogFactory，它的实现代码:</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Constructor&lt;? extends Log&gt; logConstructor;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LogFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// disable construction</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Log <span class="title">getLog</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getLog(aClass.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 这里有个特别的地方，是Log变量的的类型是Constructor&lt;? extends Log&gt;，也就是说该工厂生产的不只是一个产品，而是具有Log公共接口的一系列产品，比如Log4jImpl、Slf4jImpl等很多具体的Log。</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>资源整理 文章|博客|资源</title>
    <url>/2020/04/07/%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86%20%E6%96%87%E7%AB%A0%E3%80%81%E5%8D%9A%E5%AE%A2%E3%80%81%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p>在查找问题和学习时找到的一些网站(待更新..)</p>
<h2 id="官方文档或翻译或资源"><a href="#官方文档或翻译或资源" class="headerlink" title="官方文档或翻译或资源"></a>官方文档或翻译或资源</h2><ul>
<li><a href="https://zh-hans.reactjs.org/docs/getting-started.html">React中文</a></li>
<li><a href="http://gdut_yy.gitee.io/doc-csstdg4/">《CSS权威指南4th》中文翻译</a></li>
<li><a href="https://echarts.apache.org/zh/index.html">Echart</a></li>
<li><a href="https://docs.nestjs.cn/">nestjs中文</a></li>
<li><a href="https://www.bootcss.com/">bootstrap</a></li>
<li><a href="https://www.tslang.cn/docs/home.html">typeScript中文</a></li>
<li><a href="https://flutterchina.club/">flutter中文网</a></li>
<li><a href="https://zh.javascript.info/">现代JavaScript教程（非常推荐）</a></li>
<li><a href="https://html.spec.whatwg.org/">html Living Standard（非常推荐）</a></li>
<li><a href="https://graphql.cn/">GraphQL中文</a></li>
<li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">w3官方文档</a></li>
<li><a href="https://tc39.es/ecma262/">ES6官方文档</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/">面向开发人员和技术专业人员的 Microsoft 文档和学习主页。</a></li>
<li><a href="https://cloud.tencent.com/developer/doc/1257">RxJS 5教程</a></li>
<li><a href="https://ant-design.gitee.io/index-cn">ant-desing 蚂蚁团队</a></li>
<li><a href="https://css-tricks.com/">css-tricks css实例与技巧</a></li>
<li><a href="https://www.apollographql.com/docs/apollo-server/getting-started/">apollographql</a></li>
<li><a href="https://docs.segmentfault.com/">各类语言API</a></li>
<li><a href="https://developers.google.com/web">Web  |  Google Developers</a></li>
<li><a href="https://redux.js.org/">reduxJS</a></li>
<li><a href="https://codesandbox.io/dashboard/recent">codesandbox</a></li>
<li><a href="https://www.lodashjs.com/">lodashjs中文</a></li>
<li><a href="https://www.lodash.com/">lodashjs</a></li>
<li><a href="http://www.csszengarden.com/tr/zh-cn/">CSS 禅意花园: CSS 设计之美</a></li>
<li><a href="https://es6.ruanyifeng.com/#README">ES6 入门教程</a></li>
<li><a href="https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion">ECMAScript® 2020 Language Specification</a></li>
<li><a href="https://github.com/justjavac/free-programming-books-zh_CN/#%E7%BD%AE%E9%A1%B6">freebook 免费书籍</a></li>
<li><a href="https://docs.github.com/cn">github 帮助文档</a></li>
<li><a href="https://caniuse.com/#search=transform">can i use</a></li>
<li><a href="https://zh.javascript.info/">js Info(值得推荐的js教程)</a></li>
<li><a href="https://zhangwei.online/fullstack/zh/">深入浅出现代Web变成 全栈公开课2020（非常推荐）</a></li>
<li><a href="https://github.com/f2e-awesome/knowledge">前端架构图谱</a></li>
<li><a href="https://developer.android.com/?hl=zh-CN">android developer</a></li>
<li><a href="https://www.jqhtml.com/down/">pdf 模板资源下载</a></li>
<li><a href="https://www.w3cschool.cn/html/">w3cschool</a></li>
<li><a href="https://docshome.gitbook.io/nginx-docs/">Nginx中文文档</a></li>
<li><a href="https://appcenter.ms/">appcenter app部署平台</a></li>
</ul>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ul>
<li><a href="https://edu.aliyun.com/developer">阿里云大学开发者课堂</a></li>
<li><a href="https://www.yuque.com/fe9/basic">前端九部 语雀</a></li>
<li><a href="https://learngitbranching.js.org/?locale=zh_CN">在线git教程</a></li>
<li><a href="https://www.freecodecamp.org/learn/">freecodecamp 在线的学习网站</a></li>
<li><a href="https://github.com/TeamStuQ/skill-map">程序员技能图谱</a></li>
<li><a href="https://usehooks.com/">学习hooks的网站</a></li>
<li><a href="http://www.cnblogs.com/rocedu/p/6012545.html">基于VirtualBox安装Ubuntu</a></li>
<li><a href="https://awesomedataengineering.com/">在线DATABASE教程</a></li>
<li><a href="https://jkchao.github.io/typescript-book-chinese/">深入理解TypeScript</a></li>
<li><a href="https://livebook.manning.com/book/the-design-of-web-apis/chapter-1?origin=product-toc">freely previewing The Design of Web APIs</a></li>
<li><a href="https://ued.party/">我的职业是前端工程师</a></li>
<li><a href="https://www.kancloud.cn/xiak/quanduan/300937">前端笔记</a></li>
<li><a href="https://cs193p.sites.stanford.edu/">Developing Apps for IOS</a></li>
<li><a href="https://shanyue.tech/frontend-engineering/docker.html">如何使用docker部署前端博客</a></li>
<li><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/">函数式编程</a></li>
<li><a href="https://www.cnblogs.com/accordion/p/7207740.html">Nodejs cluster模块深入探究</a></li>
<li><a href="https://github.com/unruledboy/WebFrontEndStack/blob/master/README.zh-cn.md">WebFrontEndStack 前端技术栈</a></li>
<li><a href="https://github.com/qianguyihao/Web?utm_source=gold_browser_extension">web 前端入门到进阶</a></li>
<li><a href="https://www.codecademy.com/catalog/all">codecademy</a></li>
<li><a href="https://www.codeavengers.com/">codeavengers</a></li>
<li><a href="https://dwqs.gitbooks.io/frontenddevhandbook/content/what-is-a-fd.html">前端开发者手册</a></li>
<li><a href="https://eloquentjavascript.net/">eloquentjavascript 电子书</a></li>
</ul>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul>
<li><a href="https://bennettfeely.com/">css技巧</a></li>
<li><a href="https://tympanus.net/Development/AudioVisualizers/index2.html">CSS Demo展示</a></li>
<li><a href="http://2014.artsy.net/">CSS 首页效果Demo展示</a></li>
<li><a href="https://codepen.io/Yakudoo/full/rJjOJx">CSS 色彩效果Demo展示1</a></li>
<li><a href="https://codepen.io/pissang/full/geajpX">CSS 色彩效果Demo展示2</a></li>
<li><a href="https://pissang.github.io/papercut-box-art/">CSS 色彩效果Demo展示3</a></li>
<li><a href="https://codepen.io/tsuhre/full/BYbjyg">CSS 动效Demo展示</a></li>
<li><a href="https://wangyasai.github.io/Stars-Emmision/">CSS 时空穿梭Demo展示</a></li>
<li><a href="https://demo.marpi.pl/biomes/">CSS 模型Demo展示1</a></li>
<li><a href="https://pissang.github.io/voxelize-image/">CSS 模型Demo展示2</a></li>
</ul>
<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><ul>
<li><a href="https://www.itranslater.com/qa/details/2131899986198660096">机翻的stackoverflow</a></li>
<li><a href="https://overreacted.io/">dang-jian的博客</a></li>
<li><a href="https://www.liaoxuefeng.com/">廖雪峰的博客</a></li>
<li><a href="http://www.ruanyifeng.com/blog/">阮一峰老师的博客</a></li>
<li><a href="https://davidflanagan.com/">davidflanagan的博客（犀牛书）</a></li>
<li><a href="https://justjavascript.com/">Dan Abramov 的博客</a></li>
<li><a href="https://dillinger.io/">在线的markdown编辑器</a></li>
<li><a href="https://www.markdownguide.org/">markdownGuide</a><!-- - [roy的博客](https://www.hi-roy.com/) --></li>
<li><a href="https://www.cxyxiaowu.com/">五分钟学算法</a></li>
<li><a href="https://xiaohesong.gitbook.io/today-i-learn/">xiaohesong的博客(前端总结)</a></li>
<li><a href="https://www.cnblogs.com/larryzeal/p/5799195.html">larryzeal的博客(spring boot)</a></li>
<li><a href="https://cyc2018.github.io/CS-Notes/#/README">CS-Notes(前端博客)</a></li>
<li><a href="http://jartto.wang/">jartto(前端博客)</a></li>
<li><a href="https://ewind.us/">ewind(有点厉害)</a></li>
<li><a href="https://bellsprite.com/">认真你就输了</a></li>
<li><a href="https://zocodev.com/">关注服务器和Linux</a></li>
<li><a href="https://xiaohuochai.site/">蓝色小火柴</a></li>
<li><a href="https://www.bfdz.ink/page/2/">BFDZ(资源分享)</a></li>
<li><a href="https://www.blackglory.me/">blackglory(前端博客)</a></li>
<li><a href="https://bearbeargo.com/">熊熊咆哮(前端博客)</a></li>
<li><a href="https://shockerli.net/">格物(资源整合)</a></li>
<li><a href="https://kamilmysliwiec.com/">kamilmysliwiec.com</a></li>
<li><a href="https://medium.com/">medium社区</a></li>
<li><a href="http://www.alloyteam.com/">alloyteam腾讯</a></li>
<li><a href="https://discuss.atom.io/">ATOM社区</a><!-- - [神三元(前端博客)](https://sanyuan0704.github.io/) -->

</li>
</ul>
<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><ul>
<li><a href="http://theme-next.iissnan.com/">NexT(hexo 主题)使用文档</a></li>
<li><a href="https://www.jianshu.com/p/9f0e90cc32c2">NexT主题 小技巧</a></li>
<li><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md">从 NexT v5.1.x 更新</a></li>
<li><a href="https://blog.jyusun.com/contents/20190320112238.html">Hexo-Next7.0主题博客优化</a></li>
</ul>
<h2 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h2><ul>
<li><a href="https://electronjs.org/docs">文档 | Electron</a></li>
<li><a href="https://www.jianshu.com/p/4df1340c5850">Electron学习，从零到一 - 简书</a></li>
<li><a href="https://blog.51cto.com/wuzishu/1829551">electron 部分常用功能的实现-__无字书-51CTO博客</a></li>
<li><a href="https://www.w3cschool.cn/electronmanual/">Electron 中文文档_w3cschool</a></li>
<li><a href="https://medium.com/@impaachu/how-to-build-a-react-based-electron-app-d0f27413f17f">How to build a React based Electron app - paachu - Medium</a></li>
<li><a href="https://github.com/lyswhut/lx-music-desktop">lx-music-desktop (electron实例)</a></li>
<li><a href="http://jartto.wang/2019/07/13/use-electron-5/">使用 Electron5.0 构建你的 React 项目 - Jartto’s blog</a></li>
</ul>
<h2 id="小工具-优秀库"><a href="#小工具-优秀库" class="headerlink" title="小工具 | 优秀库"></a>小工具 | 优秀库</h2><ul>
<li><a href="https://semver.org/lang/zh-CN/">语义化版本</a></li>
<li><a href="https://caolan.github.io/async/v3/">async</a></li>
<li><a href="https://daneden.github.io/animate.css/">animate.style</a></li>
<li><a href="https://jsonplaceholder.typicode.com/">优质的mock库，{JSON} Placeholder </a></li>
<li><a href="https://zh.wikihow.com/%E9%A6%96%E9%A1%B5">wikiHow 什么都可以问</a></li>
<li><a href="https://warriorjs.com/">warriorjs</a></li>
<li><a href="https://screeps.com/a/#!/sim/tutorial">Screeps</a></li>
<li><a href="https://typecho.org/">博客搭建工具</a></li>
<li><a href="https://steamdb.info/">Steam 游戏折扣 </a></li>
<li><a href="http://www.yxdzqb.com/">SteamDB </a></li>
<li><a href="https://opengameart.org/">open game Art</a></li>
<li><a href="https://smallpdf.com/cn/result#r=46d64b2aff13f92615de55b82ac9a29f&t=pdf-to-word">PDF转Word转换器 </a></li>
<li><a href="https://www.macwk.com/">MacWk - mac软件 </a></li>
<li><a href="https://xclient.info/">xclient - mac软件 </a></li>
<li><a href="https://clustrmaps.com/">clustrmaps 站点访问IP地图</a></li>
<li><a href="https://switch-xci.com/">NS 资源下载站</a></li>
<li><a href="https://www.guerrillamail.com/zh/inbox">临时邮件系统</a></li>
<li><a href="https://tool.oschina.net/">在线工具</a></li>
<li><a href="https://zhishihezi.net/">知识盒子</a></li>
<li><a href="https://ahrefs.com/blog/zh/">博客营销</a></li>
<li><a href="https://vercel.com/solutions/react">vercel React部署工具</a></li>
<li><a href="https://lol.gamepedia.com/League_of_Legends_Esports_Wiki">LOL 赛事网站</a></li>
<li><a href="https://wangchujiang.com/linux-command/">Linux 命令搜索</a></li>
<li><a href="https://encycolorpedia.cn/">调色板</a></li>
</ul>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul>
<li><a href="https://blog.csdn.net/qq_21956483/article/details/82758543">图床的选择</a></li>
<li><a href="https://shockerli.net/post/1000-line-mysql-note/">一千行 MySQL 学习笔记</a></li>
<li><a href="https://www.runoob.com/w3cnote/windows-finds-port-usage.html">URLSearchParams 对象用法</a></li>
<li><a href="http://www.softwhy.com/article-8925-1.html">Windows下如何查看某个端口被谁占用</a></li>
<li><a href="https://blog.csdn.net/fxbin123/article/details/80428216">Postman 使用方法详解</a></li>
<li><a href="https://www.html5rocks.com/zh/tutorials/webcomponents/imports/#why">HTML import(中文翻译)</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html">浏览器同源政策及其规避方法</a></li>
<li><a href="https://www.hi-roy.com/2016/03/16/%E5%90%8D%E8%AF%8D%E7%8E%8B%E5%9B%BD%E9%87%8C%E7%9A%84%E6%AD%BB%E5%88%91%EF%BC%88%E7%BF%BB%E8%AF%91%EF%BC%89/">名词王国里的死刑（翻译）</a></li>
</ul>
<h2 id="资源合集-总结-年度盘点什么的"><a href="#资源合集-总结-年度盘点什么的" class="headerlink" title="资源合集|总结|年度盘点什么的"></a>资源合集|总结|年度盘点什么的</h2><ul>
<li><a href="https://sspai.com/">少数派</a></li>
<li><a href="https://sspai.com/page/2019/trend">少数派2019年度盘点</a></li>
</ul>
<h2 id="项目实操"><a href="#项目实操" class="headerlink" title="项目实操"></a>项目实操</h2><ul>
<li><a href="https://wiki.jikexueyuan.com/project/express-mongodb-setup-blog/simple-blog.html">使用Express和MongoDB搭建多人博客</a></li>
<li><a href="https://www.jqhtml.com/7626.html">webpack练习</a></li>
</ul>
]]></content>
      <tags>
        <tag>website</tag>
      </tags>
  </entry>
  <entry>
    <title>[转]奇妙的CSS之布局与定位</title>
    <url>/2019/05/10/%E8%BD%AC-%E5%A5%87%E5%A6%99%E7%9A%84CSS%E4%B9%8B%E5%B8%83%E5%B1%80%E4%B8%8E%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<blockquote>
<p>转载自：<a href="http://www.cnblogs.com/syfwhu/p/4319236.html">http://www.cnblogs.com/syfwhu/p/4319236.html</a></p>
</blockquote>
<p>关于布局与定位是Web前端开发里非常基础而又重要的部分。介绍相关知识的文章，很容易就可以找到。虽然，这方面的知识点不是很多，但我们如果不弄清楚，在运用时候往往会出现预料之外的布局，这些“意外”有时候很令人苦恼。下面根据我的学习和编程经验来谈一下这方面的要点。</p>
<p>要想完美的实现自己的布局，那首先一定要把盒模型搞清楚。盒模型由内容区、内边距（padding）、边框（border）和外边距（margin）构成。这些属性值都是可选的，相互之间没有依赖关系，但在具体的布局时会需要设置某些属性。我们平时设置的宽度和高度其实都是内容区的大小，而不是整个元素的大小。详细情况如下：</p>
<p><img src="https://raw.githubusercontent.com/XTZhu/image/master/blog/062030266957536.jpg" alt="盒模型"></p>
<p>那么既然了解了盒模型，我们怎么让元素按照我们的意愿布局呢？接下来就来探讨一下这个问题。</p>
<p>其实浏览器在页面上摆放HTML元素时，它是采用文档流（flow）来实现的。就像瀑布一样从最上面的元素开始，自上而下进行元素显示，遇到块元素自动换行，默认每个块元素会占浏览器窗口的整个宽度。而内联元素会在水平方向上自左向右显示，总体上从左上方流向右下方，在垂直方向上扩展外围元素。</p>
<p><strong>边距折叠</strong></p>
<p>关于流和盒模型我们还需要了解，浏览器在并排显示两个内联元素时，这两个原时间的外边距是不会重合的，二者边框之间的距离是两者外边距之和；当两个块元素上下放置时，它们挨着的外边距会折叠起来，显示出来的外边距就是二者外边距里的最大值。当元素嵌套时，也会发生外边距折叠问题，其只会合并上边距和下边距，左右外边距并不合并。需要注意的是，如果外面的元素有一个边框，那么这两个元素的外边距就不会碰到一起，也就不可能发生折叠。我们只需要记住：只要两个垂直边距碰到一起，它们就会折叠，即使是嵌套起来的也不例外。浮动元素由于已经不在文档流之中，它们的外边距是不会折叠的。</p>
<p>关于<strong>浮动</strong>我们需要了解，浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。要想使元素浮动，<strong>必须为元素设置一个宽度（width）</strong>。虽然浮动元素不是文档流之中，但是它<strong>浮动后所处的位置依然是在浮动之前的水平方向上</strong>。由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样，下面的元素填补原来的位置。<strong>有些元素会在浮动元素的下方，但是这些元素的内容并不一定会被浮动的元素所遮盖，对内联元素进行定位时，这些元素会考虑浮动元素的边界，会围绕着浮动元素放置</strong>。也可以把浮动元素想象成是被块元素忽略的元素，而内联元素会关注浮动元素的。       </p>
<p>CSS 有三种基本的定位机制：普通流、浮动和绝对定位。除非专门指定，否则所有框都在普通流中定位。也就是说，普通流中的元素的位置由元素在 (X)HTML 中的位置决定。 </p>
<hr>
<p><strong>position 属性</strong></p>
<ul>
<li><p><strong>static</strong>：元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。如果不为元素指定定位方式，会采用默认的静态定位方式。如果是静态定位，那么元素就放在正常的文档流中，由浏览器完全决定元素的摆放。虽然你可以用float来浮动元素，但最终还是由浏览器决定元素的最终放置。</p>
</li>
<li><p><strong>relative</strong>：元素框偏移某个距离。相对定位的元素会正常的流入页面，不过在页面上要进行偏移。</p>
</li>
<li><p><strong>absolute</strong>：元素框从文档流完全删除，并相对于其包含块定位。包含块可能是文档中的另一个元素或者是初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。</p>
</li>
</ul>
<p>绝对定位（<strong>absolute</strong>），虽然也是从文档流中删除，但它与浮动是不同的，它不会再和原来位置保持水平，而是由top,right,bottom,left等属性值确定，这些值都是相对于其父元素的。而且流中的元素无论是<strong>块元素还是内联元素都不再关注绝对定位的元素</strong>，它们完全不知道页面上有绝对定位元素的存在。所以在布局时为了不被绝对定位元素遮盖文档流中的元素，最好给下面的元素设置恰当的外边距（margin）。绝对定位元素还有一个很意思的特性，那就是可以分层放置，可以用z-index属性来分层放置元素，这会指定它在一个虚拟z轴（垂直于页面）上的位置，而且越靠近你的元素z-index值越大。当然z-index属性并不是绝对定位所专属的，相对定位和固定定位的元素也有这个属性。绝对定位时并不需要对元素设置宽度(width)，如果不指定宽度，则块元素会默认的占浏览器的整个宽度（包含margin-left和margin-right，并不仅仅是内容宽度width）。</p>
<ul>
<li><strong>fixed</strong>：元素框的表现类似于将 position 设置为 absolute，不过其包含块是视窗本身。也就是说，固定定位会把元素放在相对于浏览器窗口的一个位置上（不是相对于页面，html），固定定位的元素是不会随页面滚动而移动的。</li>
</ul>
<p>上面已经介绍了布局定位需要用到的知识，那么我们就可以按照自己的需要实现布局啦！使用HTML和CSS建立布局有很多种可以使用的方法，比如浮动布局、凝胶布局、绝对布局和表格显示布局等。要想掌握布局与定位还需要自己多多实践，只有在编程中才能获得提高。先写这么多吧，以后有时间的话再把实例补充进来……</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6学习笔记</title>
    <url>/2019/05/06/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="记录ES6学习过程中的一些内容"><a href="#记录ES6学习过程中的一些内容" class="headerlink" title="记录ES6学习过程中的一些内容"></a>记录ES6学习过程中的一些内容</h1><blockquote>
<p>部分摘自<a href="http://es6.ruanyifeng.com/#README">ECMAScript 6 入门</a></p>
</blockquote>
<h2 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>ES6 新增了<code>let</code>，用来声明变量。它的用法类似于<code>var</code>，但<strong>声明的变量只在<code>let</code>命令所在的代码块内有效</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">b <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>上面代码在代码块之中，分别用let和var声明了两个变量。然后在代码块之外调用这两个变量，结果let声明的变量报错，var声明的变量返回了正确的值。这表明，let声明的变量只在它所在的代码块有效。</p>
<blockquote>
<p>面试题： let和var的区别是什么？</p>
</blockquote>
<ul>
<li><p>let声明的变量只在<code>let</code>命令所在的代码块内有效, 而且有暂时性死区的约束</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">题目<span class="number">1</span>：</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">99</span>;            <span class="comment">// 全局变量a</span></span><br><span class="line">f();                   <span class="comment">// f是函数，虽然定义在调用的后面，但是函数声明会提升到作用域的顶部。 </span></span><br><span class="line"><span class="built_in">console</span>.log(a);        <span class="comment">// a=&gt;99,  此时是全局变量的a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);      <span class="comment">// 当前的a变量是下面变量a声明提升后，默认值undefined</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);      <span class="comment">// a =&gt; 10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ES6之前，我们都是用var来声明变量，而且JS只有<em>函数作用域</em>和<em>全局作用域</em>，没有<em>块级作用域</em>，所以{}限定不了var声明变量的访问范围。</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">9</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(i);  <span class="comment">// 9</span></span><br></pre></td></tr></table></figure>

<p>  <strong>ES6</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">9</span>;     <span class="comment">//只在所在的代码块有效</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(i);  <span class="comment">// Uncaught ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>又一个面试题：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span>; i++) &#123;  </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 同步注册回调函数到 异步的 宏任务队列。</span></span><br><span class="line">        <span class="built_in">console</span>.log(i);        <span class="comment">// 执行此代码时，同步代码for循环已经执行完成</span></span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="number">10</span>   共<span class="number">10</span>个</span><br><span class="line"><span class="comment">// 这里面的知识点： JS的事件循环机制，setTimeout的机制等</span></span><br></pre></td></tr></table></figure>

<p>将<code>var</code>改成<code>let</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// i虽然在全局作用域声明，但是在for循环体局部作用域中使用的时候，变量会被固定，不受外界干扰。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);    <span class="comment">//  i 是循环体内局部作用域，不受外界影响。</span></span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>

<ul>
<li>用let声明的变量，不存在变量提升<blockquote>
<p>ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。<br>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。</p>
</blockquote>
</li>
<li>let不允许在相同作用域内，重复声明同一个变量。</li>
</ul>
<h3 id="ES6的数组去重"><a href="#ES6的数组去重" class="headerlink" title="ES6的数组去重"></a>ES6的数组去重</h3><blockquote>
<p>ES6的数组去重：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">NaN</span>,<span class="literal">NaN</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line"><span class="keyword">let</span> newArr = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr)); <span class="comment">//或者 [...new Set(arr)]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ES5</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> tmpObj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> key = (<span class="keyword">typeof</span> a) + a;</span><br><span class="line">  <span class="keyword">if</span> (!tmpObj[key]) &#123;</span><br><span class="line">    tmpObj[key] = <span class="literal">true</span>;</span><br><span class="line">    result.push(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// =&gt; [1, &quot;1&quot;, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ol>
<li><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变. 这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。</p>
</li>
<li><p><code>const</code>的作用域与let命令相同：只在声明所在的块级作用域内有效。</p>
</li>
<li><p><code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</p>
</li>
<li><p><code>const</code>声明的常量，也与let一样不可重复声明。</p>
</li>
<li><p><code>const</code>实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动</p>
</li>
</ol>
<blockquote>
<p>对于简单类型的数据（数值、字符串、布尔值），<strong>值保存在变量指向的那个内存地址，因此等同于常量</strong>。但对于复合类型的数据（主要是对象和数组），<strong>变量指向的内存地址，保存的只是一个指向实际数据的指针</strong>，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p>
</blockquote>
<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p><code>let</code>实际上为 JavaScript 新增了块级作用域。ES6 允许块级作用域的任意嵌套。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#123;&#123;</span><br><span class="line">  &#123;<span class="keyword">let</span> insane = <span class="string">&#x27;Hello World&#x27;</span>&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(insane); <span class="comment">// 报错</span></span><br><span class="line">&#125;&#125;&#125;&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>上面代码使用了一个五层的块级作用域，每一层都是一个单独的作用域。第四层作用域无法读取第五层作用域的内部变量。</li>
<li>内层作用域可以定义外层作用域的同名变量。</li>
<li><em>块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了</em></li>
</ul>
<h3 id="块级作用域与函数声明"><a href="#块级作用域与函数声明" class="headerlink" title="块级作用域与函数声明"></a>块级作用域与函数声明</h3><p>ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 情况一</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125; <span class="function"><span class="title">catch</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面两种函数声明，根据 ES5 的规定都是非法的。</p>
<p>ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。</p>
<h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ol>
<li><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为<strong>解构</strong>（Destructuring）。</p>
<p> 以前，为变量赋值，只能直接指定值。</p>
<pre><code>let a = 1;
let b = 2;
let c = 3;</code></pre><p> ES6 允许写成下面这样。</p>
<pre><code>let [a, b, c] = [1, 2, 3];</code></pre><p> 上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p>
<p> 本质上,这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值.</p>
<p> 更多例子：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line">foo <span class="comment">// 1</span></span><br><span class="line">bar <span class="comment">// 2</span></span><br><span class="line">baz <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>];</span><br><span class="line">third <span class="comment">// &quot;baz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">x <span class="comment">// &quot;a&quot;</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// []</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果解构不成功，变量的值就等于<code>undefined</code>。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo] = [];</span><br><span class="line"><span class="keyword">let</span> [bar, foo] = [<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p> 以上两种情况都属于解构不成功，<code>foo</code>的值都会等于<code>undefined</code>。</p>
</li>
<li><p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">d <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<p> 上面两个例子，都属于不完全解构，但是可以成功。</p>
</li>
<li><p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo] = <span class="number">1</span>; <span class="comment">//false; NaN; undefined; null; &#123;&#125;;</span></span><br></pre></td></tr></table></figure>

<p> 上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（{}）。</p>
</li>
<li><p>对于 Set 结构，也可以使用数组的解构赋值。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y, z] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line">x <span class="comment">// &quot;a&quot;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>
<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><ol>
<li><p>解构赋值允许指定默认值。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo = <span class="literal">true</span>] = [];</span><br><span class="line">foo <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>]; <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>, <span class="literal">undefined</span>]; <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有当一个数组成员严格等于undefined，默认值才会生效。</p>
</blockquote>
<p> 上面代码中，如果一个数组成员是null，默认值就不会生效，因为null不严格等于undefined。</p>
<blockquote>
<p>参考： <a href="https://xtzhu.github.io/2019/05/07/null和undefined与NaN/">null和undefined与NaN</a></p>
</blockquote>
</li>
<li><p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>
</li>
<li><p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>
</li>
</ol>
<h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>解构不仅可以用于数组，还可以用于对象。</p>
<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，<strong>变量必须与属性同名</strong>，才能取到正确的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; bar, foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">foo <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">bar <span class="comment">// &quot;bbb&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz <span class="comment">// 无同名属性 undefined</span></span><br></pre></td></tr></table></figure>
<p>如果解构失败，变量的值等于<code>undefined</code>。</p>
<p>如果变量名与属性名不一致，必须写成下面这样。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">first</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;world&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">first</span>: f, <span class="attr">last</span>: l &#125; = obj;</span><br><span class="line">f <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line">l <span class="comment">// &#x27;world&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这实际上说明，对象的解构赋值是下面形式的简写</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: foo, <span class="attr">bar</span>: bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>
<p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">foo <span class="comment">// error: foo is not defined</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>foo</code>是匹配的<strong>模式</strong>(json对象中的键)，<code>baz</code>才是变量。真正被赋值的是变量<code>baz</code>，而不是<code>模式foo</code>。</p>
<h4 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h4><p>对象的解构也可以指定默认值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;x = <span class="number">3</span>&#125; = &#123;&#125;;</span><br><span class="line">x <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;x, y = <span class="number">5</span>&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">x</span>: y = <span class="number">3</span>&#125; = &#123;&#125;;</span><br><span class="line">y <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">x</span>: y = <span class="number">3</span>&#125; = &#123;<span class="attr">x</span>: <span class="number">5</span>&#125;;</span><br><span class="line">y <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">message</span>: msg = <span class="string">&#x27;Something went wrong&#x27;</span> &#125; = &#123;&#125;;</span><br><span class="line">msg <span class="comment">// &quot;Something went wrong&quot;</span></span><br></pre></td></tr></table></figure>

<p>默认值生效的条件是，对象的属性值严格等于undefined。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;x = <span class="number">3</span>&#125; = &#123;<span class="attr">x</span>: <span class="literal">undefined</span>&#125;;</span><br><span class="line">x <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;x = <span class="number">3</span>&#125; = &#123;<span class="attr">x</span>: <span class="literal">null</span>&#125;;</span><br><span class="line">x <span class="comment">// null //属性x等于null，因为null与undefined不严格相等，所以是个有效的赋值，导致默认值3不会生效</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="number">0</span> : first, [arr.length - <span class="number">1</span>] : last&#125; = arr; <span class="comment">//方括号这种写法，属于“属性名表达式”</span></span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">last <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h3><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个<strong>类似数组</strong>的对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">a <span class="comment">// &quot;h&quot;</span></span><br><span class="line">b <span class="comment">// &quot;e&quot;</span></span><br><span class="line">c <span class="comment">// &quot;l&quot;</span></span><br><span class="line">d <span class="comment">// &quot;l&quot;</span></span><br><span class="line">e <span class="comment">// &quot;o&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">//类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值</span></span><br><span class="line">len <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h3 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h3><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>;</span><br><span class="line">s === <span class="built_in">Number</span>.prototype.toString <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="literal">true</span>;</span><br><span class="line">s === <span class="built_in">Boolean</span>.prototype.toString <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>: x &#125; = <span class="literal">undefined</span>; <span class="comment">// TypeError</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>: y &#125; = <span class="literal">null</span>; <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure>

<h3 id="圆括号问题"><a href="#圆括号问题" class="headerlink" title="圆括号问题"></a>圆括号问题</h3><p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p>
<p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p>
<p>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p>
<blockquote>
<p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[(b)] = [<span class="number">3</span>]; <span class="comment">// 正确</span></span><br><span class="line">(&#123; <span class="attr">p</span>: (d) &#125; = &#123;&#125;); <span class="comment">// 正确</span></span><br><span class="line">[(<span class="built_in">parseInt</span>.prop)] = [<span class="number">3</span>]; <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符的-Unicode-表示法"><a href="#字符的-Unicode-表示法" class="headerlink" title="字符的 Unicode 表示法"></a>字符的 Unicode 表示法</h3><p>ES6 加强了对 Unicode 的支持，允许采用<code>\uxxxx</code>形式表示一个字符，其中<code>xxxx</code>表示字符的 Unicode 码点。</p>
<p>但是，这种表示法只限于码点在<code>\u0000</code>~<code>\uFFFF</code>之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。</p>
<h3 id="字符串的遍历器接口"><a href="#字符串的遍历器接口" class="headerlink" title="字符串的遍历器接口"></a>字符串的遍历器接口</h3><p>ES6 为字符串添加了遍历器接口，使得字符串可以被for…of循环遍历。</p>
<p>除了遍历字符串，这个遍历器最大的优点是可以识别大于0xFFFF的码点，传统的for循环无法识别这样的码点。</p>
<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p>
<blockquote>
<p>参考资料： <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings">MDN模板字符串</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通字符串</span></span><br><span class="line"><span class="string">`In JavaScript &#x27;\n&#x27; is a line-feed.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行字符串</span></span><br><span class="line"><span class="string">`In JavaScript this is</span></span><br><span class="line"><span class="string"> not legal.`</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`string text line 1</span></span><br><span class="line"><span class="string">string text line 2`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串中嵌入变量</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Bob&quot;</span>, time = <span class="string">&quot;today&quot;</span>;</span><br><span class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span> <span class="comment">//模板字符串中嵌入变量，需要将变量名写在$&#123;&#125;之中。</span></span><br></pre></td></tr></table></figure>

<p>上面代码中的模板字符串，都是用反引号表示。如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。</p>
<p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</p>
<blockquote>
<p>如果你不想要这个换行，可以使用trim方法消除它。</p>
</blockquote>
<p>大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。</p>
<p>模板字符串之中还能调用函数。</p>
<p>如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的toString方法。</p>
<p>如果模板字符串中的变量没有声明，将报错。</p>
<p>由于模板字符串的大括号内部，就是执行 JavaScript 代码，因此如果大括号内部是一个字符串，将会原样输出。</p>
<p>模板字符串甚至还能嵌套。</p>
<p>如果需要引用模板字符串本身，在需要时执行，可以写成函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="function">(<span class="params">name</span>) =&gt;</span> <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">func(<span class="string">&#x27;Jack&#x27;</span>) <span class="comment">// &quot;Hello Jack!&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="新增方法"><a href="#新增方法" class="headerlink" title="新增方法"></a>新增方法</h3><h4 id="String-raw"><a href="#String-raw" class="headerlink" title="String-raw)()"></a>String-raw)()</h4><p>ES6 还为原生的 String 对象，提供了一个raw()方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">String</span>.raw<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">2</span>+<span class="number">3</span>&#125;</span>!`</span>;</span><br><span class="line"><span class="comment">// 返回 &quot;Hi\\n5!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>.raw<span class="string">`Hi\u000A!`</span>;</span><br><span class="line"><span class="comment">// 返回 &quot;Hi\\u000A!&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果原字符串的斜杠已经转义，那么String.raw()会进行再次转义。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.raw<span class="string">`Hi\\n`</span></span><br><span class="line"><span class="comment">// 返回 &quot;Hi\\\\n&quot;</span></span><br></pre></td></tr></table></figure>
<p><code>String.raw()</code>方法可以作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。</p>
<h3 id="实例方法：includes-startsWith-endsWith"><a href="#实例方法：includes-startsWith-endsWith" class="headerlink" title="实例方法：includes(), startsWith(), endsWith()"></a>实例方法：includes(), startsWith(), endsWith()</h3><p>JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p>
<ul>
<li>includes()：返回布尔值，表示是否找到了参数字符串。</li>
<li>startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。</li>
<li>endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。</li>
</ul>
<p>这三个方法都支持第二个参数，表示开始搜索的位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line"></span><br><span class="line">s.startsWith(<span class="string">&#x27;world&#x27;</span>, <span class="number">6</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">5</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">6</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>上面代码表示，使用第二个参数n时，endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。</p>
]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>ES6</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
</search>
